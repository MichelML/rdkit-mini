{"version":3,"sources":["redux/rdkit/actions.js","redux/reducers.js","redux/rdkit/reducers.js","redux/store.js","components/Introduction/Introduction.js","components/CodeExample/CodeExample.js","components/NavBar/NavBar.js","components/SideNav/SideNav.js","examples/ExampleMoleculeStructure.js","components/MoleculeStructure/MoleculeStructure.js","examples/ExampleSubstructure.js","examples/ExampleMultiSubstructure.js","utils/smiles.js","examples/ExampleSubstructureSearch.js","examples/ExampleSvg.js","examples/ExampleCanvas.js","examples/ExampleDrawingOptions.js","examples/ExampleList.js","index.js","webpack:///./src/examples/ExampleList.js?699a","webpack:///./src/components/MoleculeStructure/MoleculeStructure.js?34a0","webpack:///./src/examples/ExampleSvg.js?e959","webpack:///./src/examples/ExampleCanvas.js?b4aa","webpack:///./src/examples/ExampleSubstructure.js?a3ad","webpack:///./src/examples/ExampleMultiSubstructure.js?8628","webpack:///./src/examples/ExampleDrawingOptions.js?1990","webpack:///./src/examples/ExampleSubstructureSearch.js?2ee7"],"names":["RDKitActionTypes","setRDKitState","state","type","payload","rootReducer","combineReducers","rdKitState","action","Store","createStore","Introduction","id","className","Component","CodeExample","code","children","trigger","language","style","a11yDark","NavBar","burgerActive","brugerActiveClass","this","padding","role","aria-label","href","alt","src","process","aria-expanded","data-target","onClick","setState","aria-hidden","data-tooltip","SideNav","activeLink","window","location","hash","length","name","map","section","Fragment","child","undefined","ExampleMoleculeStructure","MoleculeStructure","props","MOL_DETAILS","width","height","bondLineWidth","addStereoAnnotation","extraDetails","svg","drawingDelay","setTimeout","drawSVGorCanvas","mol","RDKit","get_mol","structure","qmol","get_qmol","subStructure","svgMode","isValidMol","get_svg_with_highlights","getMolDetails","canvas","document","getElementById","draw_to_canvas_with_highlights","delete","is_valid","subStructHighlightDetails","JSON","parse","get_substruct_matches","subStructHighlightDetailsMerged","_","isEmpty","reduce","acc","atoms","bonds","stringify","draw","prevProps","isEqual","title","dangerouslySetInnerHTML","__html","defaultProps","connect","ExampleSubstructure","ExampleMultiSubstructure","SMILES_LIST","ExampleList","matches","searchValue","searching","handleSearchChange","debounce","e","currentVal","target","value","filter","smiles","hasMatch","get_substruct_match","smilesList","slice","margin","onChange","placeholder","renderInputIcon","React","ExampleSVG","ExampleCanvas","ExampleDrawingOptions","initialState","handleStateChange","stateProp","computing","parseFloat","checked","defaultValue","mainStructureInput","subStructureInput","legend","defaultChecked","addAtomIndices","explicitMethyl","highlightColour","backgroundColour","legendColour","symbolColour","renderContent","getColourProportionsFromHex","border","borderRadius","hex","hexRgb","format","v","toFixed","overflowX","initRDKitModule","then","dispatch","catch","ReactDOM","render","component","elementId","ExampleSubstructureSearch","forEach","example","store"],"mappings":"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","file":"static/js/main.02401c4a.chunk.js","sourcesContent":["export const RDKitActionTypes = {\n  set: \"SET_RDKIT_STATE\",\n};\n\nexport const setRDKitState = (state = \"NOT_LOADED\") => ({\n  type: RDKitActionTypes.set,\n  payload: state,\n});\n","import { combineReducers } from \"redux\";\nimport { rdKitStateReducer } from \"./rdkit/reducers\";\n\nexport const rootReducer = combineReducers({\n  rdKitState: rdKitStateReducer,\n});\n","import { RDKitActionTypes } from \"./actions\";\n\nexport const rdKitStateReducer = (state = \"NOT_LOADED\", action = {}) => {\n  return action.type === RDKitActionTypes.set ? action.payload : state;\n};\n","import { createStore } from \"redux\";\nimport { rootReducer } from \"./reducers\";\n\nexport const Store = createStore(rootReducer);\n","import React, { Component } from \"react\";\n\nexport default class Introduction extends Component {\n  render() {\n    return (\n      <div id=\"component-introduction\" className=\"container\">\n        <section className=\"hero\">\n          <div className=\"hero-body\">\n            <p className=\"title\">Introduction</p>\n            <p className=\"subtitle\">Welcome to RDKit.js for React.</p>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n","import SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { a11yDark } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport ReactCollapsible from \"react-collapsible\";\n\nfunction CodeExample({ code, children }) {\n  return (\n    <>\n      {children}\n      <div className=\"container\">\n        <ReactCollapsible\n          trigger={\n            <button className=\"button is-primary is-light is-large is-fullwidth\">\n              See Code Example\n            </button>\n          }\n        >\n          <div className=\"container\">\n            <SyntaxHighlighter language=\"javascript\" style={a11yDark}>\n              {code}\n            </SyntaxHighlighter>\n          </div>\n        </ReactCollapsible>\n      </div>\n    </>\n  );\n}\n\nexport default CodeExample;\n","import React, { Component } from \"react\";\n\nexport default class NavBar extends Component {\n  state = {\n    burgerActive: false,\n  };\n  render() {\n    const brugerActiveClass = this.state.burgerActive ? \" is-active\" : \"\";\n    return (\n      <>\n        <nav\n          className=\"navbar has-shadow\"\n          style={{ padding: \"12px 0\" }}\n          role=\"navigation\"\n          aria-label=\"main navigation\"\n        >\n          <div className=\"navbar-brand\" style={{ padding: \"6px\" }}>\n            <a className=\"navbar-item\" href=\"#/\">\n              <img\n                alt=\"logo\"\n                src={`${process.env.PUBLIC_URL}/rdkitjs_cropped_200.png`}\n              />\n            </a>\n\n            <a\n              role=\"button\"\n              className={`navbar-burger${brugerActiveClass}`}\n              aria-label=\"menu\"\n              aria-expanded=\"false\"\n              data-target=\"navbarBasicExample\"\n              href=\"#/\"\n              onClick={() => {\n                this.setState({ burgerActive: !this.state.burgerActive });\n              }}\n            >\n              <span aria-hidden=\"true\"></span>\n              <span aria-hidden=\"true\"></span>\n              <span aria-hidden=\"true\"></span>\n            </a>\n          </div>\n\n          <div\n            id=\"navbarBasicExample\"\n            className={`navbar-menu${brugerActiveClass}`}\n          >\n            <div className=\"navbar-start\">\n              <a className=\"navbar-item\" href=\"https://github.com/rdkit/rdkit\">\n                {\" \"}\n                RDKit Home{\" \"}\n              </a>\n            </div>\n\n            <div className=\"navbar-end\">\n              <div className=\"navbar-item\">\n                <div className=\"buttons\">\n                  <a\n                    data-tooltip=\"View Source Code\"\n                    className=\"button has-tooltip-bottom is-white is-big\"\n                    href=\"https://github.com/MichelML/rdkit-js/tree/master/examples/react-example\"\n                  >\n                    <span className=\"icon\">\n                      <i className=\"fab fa-github fa-2x\"></i>\n                    </span>\n                  </a>\n                </div>\n              </div>\n              <div className=\"navbar-item\">\n                <div className=\"buttons\">\n                  <a\n                    data-tooltip=\"Go to NPM package\"\n                    className=\"button has-tooltip-bottom is-white is-big\"\n                    href=\"https://www.npmjs.com/package/@rdkit/rdkit\"\n                  >\n                    <span className=\"icon\">\n                      <i className=\"fab fa-npm fa-2x\"></i>\n                    </span>\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </nav>\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class SideNav extends Component {\n  state = {\n    activeLink: \"#component-introduction\",\n  };\n\n  componentDidMount() {\n    if (window.location.hash.length > 1) {\n      this.setState({ activeLink: window.location.hash });\n    }\n  }\n\n  render() {\n    const sections = [\n      {\n        name: \"Quick Start\",\n        children: [\n          {\n            id: \"#component-introduction\",\n            name: \"Introduction\",\n          },\n          {\n            id: \"#component-example-list\",\n            name: \"Overview\",\n          },\n        ],\n      },\n      {\n        name: \"Components\",\n        children: [\n          {\n            id: \"#component-example-moleculestructure\",\n            name: \"MoleculeStructure\",\n          },\n        ],\n      },\n      {\n        name: \"Examples\",\n        children: [\n          {\n            id: \"#component-example-svg\",\n            name: \"SVG Rendering\",\n          },\n          {\n            id: \"#component-example-canvas\",\n            name: \"Canvas Rendering\",\n          },\n          {\n            id: \"#component-example-substruct\",\n            name: \"Substructure Highlighting\",\n          },\n          {\n            id: \"#component-example-multi-substruct\",\n            name: \"Multi-Substructure Highlighting\",\n          },\n          {\n            id: \"#component-example-substruct-search\",\n            name: \"Substructure Search\",\n          },\n          {\n            id: \"#component-example-drawing-options\",\n            name: \"Additional Options\",\n          },\n        ],\n      },\n    ];\n\n    const renderedSections = sections.map((section) => (\n      <React.Fragment key={section.name}>\n        <p className=\"menu-label\">{section.name}</p>\n        <ul className=\"menu-list\">\n          {section.children.map((child) => (\n            <li key={child.id}>\n              <a\n                href={child.id}\n                className={\n                  this.state.activeLink === child.id ? \"is-active\" : undefined\n                }\n                onClick={() => this.setState({ activeLink: child.id })}\n              >\n                {child.name}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </React.Fragment>\n    ));\n\n    return renderedSections;\n  }\n}\n","function ExampleMoleculeStructure() {\n  return (\n    <div id=\"component-example-moleculestructure\" className=\"container\">\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title\">MoleculeStructure</p>\n          <p className=\"subtitle\">\n            The examples below will mostly use the React component{\" \"}\n            <code className=\"is-family-code\">MoleculeStructure</code> to render\n            the examples. You can see the React implementation in the code\n            below.\n          </p>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default ExampleMoleculeStructure;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport \"./MoleculeStructure.css\";\n\nclass MoleculeStructure extends Component {\n  static propTypes = {\n    /**\n     * Generic properties\n     */\n    id: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    svgMode: PropTypes.bool,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    /**\n     * RDKit-specific properties\n     */\n    structure: PropTypes.string.isRequired,\n    subStructure: PropTypes.string,\n    extraDetails: PropTypes.object,\n    drawingDelay: PropTypes.number,\n  };\n\n  static defaultProps = {\n    subStructure: \"\",\n    className: \"\",\n    width: 250,\n    height: 200,\n    svgMode: false,\n    extraDetails: {},\n    drawingDelay: undefined,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.MOL_DETAILS = {\n      width: this.props.width,\n      height: this.props.height,\n      bondLineWidth: 1,\n      addStereoAnnotation: true,\n      ...this.props.extraDetails,\n    };\n\n    this.state = {\n      svg: undefined,\n    };\n  }\n\n  draw() {\n    if (this.props.drawingDelay) {\n      setTimeout(() => {\n        this.drawSVGorCanvas();\n      }, this.props.drawingDelay);\n    } else {\n      this.drawSVGorCanvas();\n    }\n  }\n\n  drawSVGorCanvas() {\n    const mol = window.RDKit.get_mol(this.props.structure || \"invalid\");\n    const qmol = window.RDKit.get_qmol(this.props.subStructure || \"invalid\");\n\n    if (this.props.svgMode && this.isValidMol(mol)) {\n      const svg = mol.get_svg_with_highlights(this.getMolDetails(mol, qmol));\n      this.setState({ svg });\n    } else if (this.isValidMol(mol)) {\n      const canvas = document.getElementById(this.props.id);\n      mol.draw_to_canvas_with_highlights(canvas, this.getMolDetails(mol, qmol));\n    }\n\n    /**\n     * Delete C++ mol objects manually\n     * https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html#memory-management\n     */\n    mol.delete();\n    qmol.delete();\n  }\n\n  isValidMol(mol) {\n    return !!mol && mol.is_valid();\n  }\n\n  getMolDetails(mol, qmol) {\n    if (this.isValidMol(mol) && this.isValidMol(qmol)) {\n      const subStructHighlightDetails = JSON.parse(\n        mol.get_substruct_matches(qmol)\n      );\n      const subStructHighlightDetailsMerged = !_.isEmpty(\n        subStructHighlightDetails\n      )\n        ? subStructHighlightDetails.reduce(\n            (acc, { atoms, bonds }) => ({\n              atoms: [...acc.atoms, ...atoms],\n              bonds: [...acc.bonds, ...bonds],\n            }),\n            { bonds: [], atoms: [] }\n          )\n        : subStructHighlightDetails;\n      return JSON.stringify({\n        ...this.MOL_DETAILS,\n        ...(this.props.extraDetails || {}),\n        ...subStructHighlightDetailsMerged,\n      });\n    } else {\n      return JSON.stringify({\n        ...this.MOL_DETAILS,\n        ...(this.props.extraDetails || {}),\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.rdKitState === \"LOADED\") {\n      this.draw();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const shouldUpdateDrawing =\n      (prevProps.rdKitState !== \"LOADED\" &&\n        this.props.rdKitState === \"LOADED\") ||\n      prevProps.structure !== this.props.structure ||\n      prevProps.subStructure !== this.props.subStructure ||\n      prevProps.width !== this.props.width ||\n      prevProps.height !== this.props.height ||\n      !_.isEqual(prevProps.extraDetails, this.props.extraDetails);\n\n    if (shouldUpdateDrawing) {\n      this.draw();\n    }\n  }\n\n  render() {\n    if (this.props.rdKitState === \"ERROR\") {\n      return \"Error loading renderer.\";\n    }\n\n    if (this.props.rdKitState === \"LOADED\") {\n      const mol = window.RDKit.get_mol(this.props.structure || \"invalid\");\n      const isValidMol = this.isValidMol(mol);\n      mol.delete();\n\n      if (!isValidMol) {\n        return (\n          <span title={`Cannot render structure: ${this.props.structure}`}>\n            Render Error.\n          </span>\n        );\n      } else if (this.props.svgMode) {\n        return (\n          <div\n            title={this.props.structure}\n            className={\"molecule-structure-svg \" + (this.props.className || \"\")}\n            style={{ width: this.props.width, height: this.props.height }}\n            dangerouslySetInnerHTML={{ __html: this.state.svg }}\n          ></div>\n        );\n      } else {\n        return (\n          <div\n            className={\n              \"molecule-canvas-container \" + (this.props.className || \"\")\n            }\n          >\n            <canvas\n              title={this.props.structure}\n              id={this.props.id}\n              width={this.props.width}\n              height={this.props.height}\n            ></canvas>\n          </div>\n        );\n      }\n    }\n\n    return \"Loading renderer...\";\n  }\n}\n\nconst mapStateToProps = ({ rdKitState }) => ({\n  rdKitState,\n});\n\nexport default connect(mapStateToProps)(MoleculeStructure);\n","import MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\n\nfunction ExampleSubstructure() {\n  const caffeine = \"CN1C=NC2=C1C(=O)N(C(=O)N2C)\";\n  const caffeineSubStruct = \"[N,n,O;!H0]\";\n\n  const aspirin = \"CC(=O)Oc1ccccc1C(=O)O\";\n  const aspirinSubStruct = \"CC(=O)Oc1ccccc1C\";\n\n  return (\n    <div id=\"component-example-substruct\" className=\"container\">\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title\">Substructure Highlight</p>\n          <p className=\"subtitle\">\n            You can also highlight substructure of molecules with both the SVG\n            and Canvas APIs.\n          </p>\n        </div>\n      </section>\n      <div className=\"columns is-desktop\">\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-substruct-svg-caffeine\"\n            structure={caffeine}\n            subStructure={caffeineSubStruct}\n            width={350}\n            height={300}\n            svgMode\n          />\n        </div>\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-subsctruct-canvas-aspirin\"\n            structure={aspirin}\n            subStructure={aspirinSubStruct}\n            width={350}\n            height={300}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleSubstructure;\n","import MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\n\nfunction ExampleMultiSubstructure() {\n  const caffeine = \"CN1C=NC2=C1C(=O)N(C(=O)N2C)\";\n  const caffeineSubStruct = \"[N,n,o,O]\";\n\n  const aspirin = \"CC(=O)Oc1ccccc1C(=O)O\";\n  const aspirinSubStruct = \"[O,o].c1ccccc1\";\n\n  return (\n    <div id=\"component-example-multi-substruct\" className=\"container\">\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title\">Multi-substructure Highlight</p>\n          <p className=\"subtitle\">\n            You can also highlight multiple substructures of molecules with\n            SMILES, SMARTS and a combination of the two with dot notation.\n          </p>\n        </div>\n      </section>\n      <div className=\"columns is-desktop\">\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-multisubstruct-svg-caffeine\"\n            structure={caffeine}\n            subStructure={caffeineSubStruct}\n            width={350}\n            height={300}\n            svgMode\n          />\n        </div>\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-multisubsctruct-canvas-aspirin\"\n            structure={aspirin}\n            subStructure={aspirinSubStruct}\n            width={350}\n            height={300}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleMultiSubstructure;\n","/**\n * Taken from https://github.com/reymond-group/smilesDrawer/blob/master/example/drugbank.js\n */\n\nexport const SMILES_LIST = [\n  \"CC[C@H](C)[C@H](NC(=O)[C@H](CCC(O)=O)NC(=O)[C@H](CCC(O)=O)NC(=O)[C@H](CC1=CC=CC=C1)NC(=O)[C@H](CC(O)=O)NC(=O)CNC(=O)[C@H](CC(N)=O)NC(=O)CNC(=O)CNC(=O)CNC(=O)CNC(=O)[C@@H]1CCCN1C(=O)[C@H](CCCNC(N)=N)NC(=O)[C@@H]1CCCN1C(=O)[C@H](N)CC1=CC=CC=C1)C(=O)N1CCC[C@H]1C(=O)N[C@@H](CCC(O)=O)C(=O)N[C@@H](CCC(O)=O)C(=O)N[C@@H](CC1=CC=C(O)C=C1)C(=O)N[C@@H](CC(C)C)C(O)=O\",\n  \"CC(C)C[C@H](NC(=O)[C@@H](COC(C)(C)C)NC(=O)[C@H](CC1=CC=C(O)C=C1)NC(=O)[C@H](CO)NC(=O)[C@H](CC1=CNC2=CC=CC=C12)NC(=O)[C@H](CC1=CN=CN1)NC(=O)[C@@H]1CCC(=O)N1)C(=O)N[C@@H](CCCN=C(N)N)C(=O)N1CCC[C@H]1C(=O)NNC(N)=O\",\n  \"NC(=O)CC[C@@H]1NC(=O)[C@H](CC2=CC=CC=C2)NC(=O)[C@H](CC2=CC=C(O)C=C2)NC(=O)CCSSC[C@H](NC(=O)[C@H](CC(N)=O)NC1=O)C(=O)N1CCC[C@H]1C(=O)N[C@@H](CCCNC(N)=N)C(=O)NCC(N)=O\",\n  \"CC(C)C[C@H](NC(=O)[C@@H](CCCNC(N)=O)NC(=O)[C@H](CC1=CC=C(O)C=C1)NC(=O)[C@H](CO)NC(=O)[C@@H](CC1=CN=CC=C1)NC(=O)[C@@H](CC1=CC=C(Cl)C=C1)NC(=O)[C@@H](CC1=CC2=CC=CC=C2C=C1)NC(C)=O)C(=O)N[C@@H](CCCNC(N)=N)C(=O)N1CCC[C@H]1C(=O)N[C@H](C)C(N)=O\",\n  \"CC[C@@H]1NC(=O)[C@H]([C@H](O)[C@H](C)CC=CC)N(C)C(=O)[C@H](C(C)C)N(C)C(=O)[C@H](CC(C)C)N(C)C(=O)[C@H](CC(C)C)N(C)C(=O)[C@@H](C)NC(=O)[C@H](C)NC(=O)[C@H](CC(C)C)N(C)C(=O)[C@@H](NC(=O)[C@H](CC(C)C)N(C)C(=O)CN(C)C1=O)C(C)C\",\n  \"NCCCC[C@H](NC(=O)[C@@H]1CCCN1C(=O)[C@@H]1CSSC[C@H](N)C(=O)N[C@@H](CC2=CC=CC=C2)C(=O)N[C@@H](CC2=CC=CC=C2)C(=O)N[C@@H](CCC(N)=O)C(=O)N[C@@H](CC(N)=O)C(=O)N1)C(=O)NCC(N)=O\",\n  \"[H][C@]1(NC(=O)[C@H](CCCCN)NC(=O)[C@@H](CC2=CNC3=C2C=CC=C3)NC(=O)[C@H](CC2=CC=CC=C2)NC(=O)[C@H](CSSC[C@H](NC1=O)C(=O)N[C@H](CO)[C@@H](C)O)NC(=O)[C@H](N)CC1=CC=CC=C1)[C@@H](C)O\",\n  \"CC1=NC=C(COP(O)(O)=O)C(C=O)=C1O\",\n  \"OC[C@H]1O[C@@H]([C@H](O)[C@@H]1OP(O)(=O)O[C@]([H])(C)CNC(=O)CC[C@]1(C)[C@@H](CC(=O)N)[C@@]2([H])N([Co]C#N)C1=C(C)/C1=N/C(=CC3=NC(=C(C)/C4=N[C@]2(C)[C@@](C)(CC(=O)N)[C@@H]4CCC(=O)N)[C@@](C)(CC(=O)N)[C@@H]3CCC(=O)N)/C(C)(C)[C@@H]1CCC(=O)N)N1C=NC2=CC(C)=C(C)C=C12\",\n  \"NC1=NC(=O)C2=C(NCC(CNC3=CC=C(C=C3)C(=O)N[C@@H](CCC(O)=O)C(O)=O)N2)N1\",\n  \"N[C@@H](CC1=CN=CN1)C(O)=O\",\n  \"C[S+](CC[C@H](N)C(O)=O)C[C@H]1O[C@H]([C@H](O)[C@@H]1O)N1C=NC2=C(N)N=CN=C12\",\n  \"CC(=O)C(O)=O\",\n  \"N[C@@H](CC1=CC=CC=C1)C(O)=O\",\n  \"[H][C@]12CS[C@@H](CCCCC(O)=O)[C@@]1([H])NC(=O)N2\",\n  \"C[N+](C)(C)CCO\",\n  \"NCCCC[C@H](N)C(O)=O\",\n  \"N[C@@H](CCCNC(N)=N)C(O)=O\",\n  \"[H][C@@]1(OC(=O)C(O)=C1O)[C@@H](O)CO\",\n  \"NCCCNCCCCNCCCN\",\n  \"N[C@@H](CC(O)=O)C(O)=O\",\n  \"NCCC[C@H](N)C(O)=O\",\n  \"N[C@@H](CCC(N)=O)C(O)=O\",\n  \"NC1=C2N=CN([C@@H]3O[C@H](COP(O)(O)=O)[C@@H](O)[C@H]3O)C2=NC=N1\",\n  \"CCC=C/CC=C/CC=C/CCCCCCCC(O)=O\",\n  \"N[C@@H](CO)C(O)=O\",\n  \"CSCC[C@H](N)C(O)=O\",\n  \"N[C@@H](CC1=CC=C(O)C=C1)C(O)=O\",\n  \"C[C@H](CCCC(C)(C)O)[C@@]1([H])CC[C@@]2([H])C(CCC[C@]12C)=CC=C1C[C@@H](O)C[C@H](O)C1=C\",\n  \"CC(C=CC=C(/C)C=CC1C(C)=CC(O)CC1(C)C)=C/C=C/C=C(C)/C=C/C=C(C)/C=C/C1=C(C)CC(O)CC1(C)C\",\n  \"N[C@@H](CSSC[C@H](N)C(O)=O)C(O)=O\",\n  \"OC(=O)CCC(O)=O\",\n  \"CC1=C(C)C=C2N(C[C@H](O)[C@H](O)[C@H](O)CO)C3=NC(=O)NC(=O)C3=NC2=C1\",\n  \"[H]C(=O)[C@H](NC(C)=O)[C@@H](O)[C@H](O)[C@H](O)CO\",\n  \"N[C@@H](CCC(O)=O)C(O)=O\",\n  \"N[C@@H](CCC(=O)N[C@@H](CS)C(=O)NCC(O)=O)C(O)=O\",\n  \"CCCC(=O)O[C@H](COC(=O)CC)COP(O)(=O)OC[C@H](N)C(O)=O\",\n  \"NCC(O)=O\",\n  \"C[C@H](CCCC(C)(C)O)[C@@]1([H])CC[C@@]2([H])C(CCC[C@]12C)=CC=C1C[C@@H](O)CCC1=C\",\n  \"CC1=NC=C(CO)C(C=O)=C1O\",\n  \"CN(CC(O)=O)C(N)=N\",\n  \"CC(C)C[C@H](N)C(O)=O\",\n  \"N[C@@H](CC1=CNC2=CC=CC=C12)C(O)=O\",\n  \"N[C@@H](CS)C(O)=O\",\n  \"CC1=C(CCO)SC=[N+]1CC1=CN=C(C)N=C1N\",\n  \"CC(C)[C@@H](C)C=C[C@@H](C)[C@@]1([H])CC[C@@]2([H])C(CCC[C@]12C)=CC=C1C[C@@H](O)CCC1=C\",\n  \"CCCCCC=C/CC=C/CC=C/CCCCCCC(O)=O\",\n  \"N[C@@H](CCCNC(N)=O)C(O)=O\",\n  \"C[C@@H](O)[C@H](N)C(O)=O\",\n  \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](CO[P@](O)(=O)O[P@](O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)N2C=NC3=C(N)N=CN=C23)[C@@H](O)[C@H]1O\",\n  \"NC1=NC(=O)C2=NC(CNC3=CC=C(C=C3)C(=O)N[C@@H](CCC(O)=O)C(O)=O)=CN=C2N1\",\n  \"CCC=C/CC=C/CC=C/CC=C/CC=C/CCCC(O)=O\",\n  \"C[C@H](N)C(O)=O\",\n  \"CC(C)[C@H](N)C(O)=O\",\n  \"CC(=C/CO)C=CC=C(/C)C=CC1=C(C)CCCC1(C)C\",\n  \"CC(C)CCC[C@@H](C)CCC[C@@H](C)CCC[C@]1(C)CCC2=C(O1)C(C)=C(C)C(O)=C2C\",\n  \"CC1=C(O)C(CO)=C(CO)C=N1\",\n  \"OC(=O)CCCCC1CCSS1\",\n  \"CC[C@H](C)[C@H](N)C(O)=O\",\n  \"COC(=O)[C@H](CC1=CC=CC=C1)NC(=O)[C@@H](N)CC(O)=O\",\n  \"CC(C)CCC[C@@H](C)[C@@]1([H])CC[C@@]2([H])C(CCC[C@]12C)=CC=C1C[C@@H](O)CCC1=C\",\n  \"CC1=CC(=O)C2=CC=CC=C2C1=O\",\n  \"NC1=NC=NC2=C1N=CN2[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OP(O)(O)=O)[C@@H](O)[C@H]1O\",\n  \"OC(=O)[C@@H]1CCCN1\",\n  \"NC1=C2NC=NC2=NC=N1\",\n  \"N[C@@H](CC(N)=O)C(O)=O\",\n  \"[H][C@]12[C@H](C[C@H](O)C=C1C=C[C@H](C)[C@@H]2CC[C@@H](O)C[C@@H](O)CC(O)=O)OC(=O)[C@@H](C)CC\",\n  \"COCCCCC(=NOCCN)C1=CC=C(C=C1)C(F)(F)F\",\n  \"CCCCC(=O)N(CC1=CC=C(C=C1)C1=CC=CC=C1C1=NNN=N1)[C@@H](C(C)C)C(O)=O\",\n  \"[H][C@@]12CCC[C@]1([H])N([C@@H](C2)C(O)=O)C(=O)[C@H](C)N[C@@H](CCC1=CC=CC=C1)C(=O)OCC\",\n  \"C[C@@H](CC1=CC(O)=C(O)C=C1)[C@H](C)CC1=CC(O)=C(O)C=C1\",\n  \"[H][C@@]12C[C@@]3([H])[C@]4([H])C[C@H](F)C5=CC(=O)C=C[C@]5(C)[C@@]4([H])[C@@H](O)C[C@]3(C)[C@@]1(OC(C)(C)O2)C(=O)CO\",\n  \"NCC(CC(O)=O)C1=CC=C(Cl)C=C1\",\n  \"CC(N)CC1=CC=CC=C1\",\n  \"CSCC[C@H](NC(=O)[C@H](CC1=CNC2=C1C=CC=C2)NC(=O)CCNC(=O)OC(C)(C)C)C(=O)N[C@@H](CC(O)=O)C(=O)N[C@@H](CC1=CC=CC=C1)C(N)=O\",\n  \"CN1CCC[C@H]1C1=CN=CC=C1\",\n  \"CC1O[C@@]2(CS1)CN1CCC2CC1\",\n  \"OC1N=C(C2=CC=CC=C2Cl)C2=C(NC1=O)C=CC(Cl)=C2\",\n  \"COC(=O)CCC1=CC=C(OCC(O)CNC(C)C)C=C1\",\n  \"CC(C)C[C@H](NC(=O)[C@H](CC1=CC=CC=C1)NC(=O)C1=CN=CC=N1)B(O)O\",\n  \"[H]C(Cl)=CC(O)(CC)C#C\",\n  \"C[C@@](CC1=CC(O)=C(O)C=C1)(NN)C(O)=O\",\n  \"CC(C)(N)CC1=CC=CC=C1\",\n  \"CC(C)NCCCC1(C(N)=O)C2=CC=CC=C2C2=CC=CC=C12\",\n  \"COC1=CC=CC(=C1)[C@@]1(O)CCCC[C@@H]1CN(C)C\",\n  \"NC1=NC=NC2=C1N=CN2[C@@H]1O[C@H](CO)[C@@H](O)[C@@H]1O\",\n  \"CC(C)NCC(O)COC1=CC=C(CCOCC2CC2)C=C1\",\n  \"OC(CN1C=NC=N1)(CN1C=NC=N1)C1=C(F)C=C(F)C=C1\",\n  \"CC1=C(C)C2=C(CCC(C)(COC3=CC=C(CC4SC(=O)NC4=O)C=C3)O2)C(C)=C1O\",\n  \"CCOC(=O)C1=C[C@@H](OC(CC)CC)[C@H](NC(C)=O)[C@@H](N)C1\",\n  \"CC[C@H]1OC(=O)[C@H](C)[C@@H](O[C@H]2C[C@@](C)(OC)[C@@H](O)[C@H](C)O2)[C@H](C)[C@@H](O[C@@H]2O[C@H](C)C[C@@H]([C@H]2O)N(C)C)[C@](C)(O)C[C@@H](C)C(=O)[C@H](C)[C@@H](O)[C@]1(C)O\",\n  \"[H]O[Co+]N1C2=C(C)/C3=N/C(=CC4=NC(=C(C)/C5=N[C@@](C)([C@@]1([H])[C@H](CC(=O)N)[C@@]2(C)CCC(=O)NC[C@@H](C)OP(=O)([O-])O[C@H]1[C@@H](O)[C@H](O[C@@H]1CO)N1C=NC2=CC(C)=C(C)C=C12)[C@@](C)(CC(N)=O)[C@@H]5CCC(=O)N)[C@@](C)(CC(=O)N)[C@@H]4CCC(=O)N)/C(C)(C)[C@@H]3CCC(=O)N\",\n  \"CN1C=NC2=C1C(=O)N(C)C(=O)N2C\",\n  \"C[N+](C)(C)CCOC(=O)CCC(=O)OCC[N+](C)(C)C\",\n  \"CCCC1=NN(C)C2=C1NC(=NC2=O)C1=C(OCC)C=CC(=C1)S(=O)(=O)N1CCN(C)CC1\",\n];\n","import React from \"react\";\nimport _ from \"lodash\";\nimport MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\nimport { SMILES_LIST } from \"../utils/smiles\";\n\nclass ExampleList extends React.Component {\n  state = {\n    matches: SMILES_LIST,\n    searchValue: \"\",\n    searching: false,\n  };\n\n  render() {\n    const matches = this.state.matches.slice(0, 50);\n    return (\n      <div id=\"component-example-substruct-search\" className=\"container\">\n        <section className=\"hero\">\n          <div className=\"hero-body\">\n            <p className=\"title\">Substructure match</p>\n            <p className=\"subtitle\">\n              You can perform client-side substructure match.\n            </p>\n          </div>\n        </section>\n        <div className=\"columns\" style={{ margin: \"12px 0\" }}>\n          <div className=\"column\">\n            <div className=\"field\">\n              <div className=\"control has-icons-left\">\n                <input\n                  className=\"input\"\n                  type=\"email\"\n                  onChange={(e) => this.handleSearchChange(e)}\n                  placeholder=\"Enter a SMARTS or SMILES string here...\"\n                />\n                {this.renderInputIcon()}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"columns is-multiline\" style={{ margin: \"12px\" }}>\n          {matches.length > 0\n            ? matches.slice(0, 40).map((smiles) => (\n                <div className=\"column\" key={smiles}>\n                  <MoleculeStructure\n                    id={smiles}\n                    structure={smiles}\n                    subStructure={this.state.searchValue}\n                    height={200}\n                    width={200}\n                    svgMode\n                  />\n                </div>\n              ))\n            : \"Input is either invalid or no matches were found.\"}\n        </div>\n      </div>\n    );\n  }\n\n  handleSearchChange = _.debounce((e) => {\n    this.setState({ searching: true });\n\n    setTimeout(() => {\n      const noMatchLength = 2;\n      const currentVal = e.target.value;\n      this.setState({ searchValue: currentVal });\n      if (!currentVal) {\n        this.setState({ smilesList: SMILES_LIST });\n      } else {\n        const qmol = window.RDKit.get_qmol(currentVal);\n        const matches = SMILES_LIST.filter((smiles) => {\n          const mol = window.RDKit.get_mol(smiles);\n          const hasMatch = mol.get_substruct_match(qmol).length > noMatchLength;\n          mol.delete();\n          return hasMatch;\n        });\n        this.setState({ matches });\n        if (qmol.is_valid()) {\n        } else {\n          this.setState({ matches: [] });\n        }\n        qmol.delete();\n      }\n\n      this.setState({ searching: false });\n    }, 100);\n  }, 300);\n\n  renderInputIcon() {\n    if (this.state.searching) {\n      return (\n        <span key=\"searching-input-icon\" className=\"icon is-small is-left\">\n          <i className=\"fas fa-circle-notch fa-spin\" />\n        </span>\n      );\n    } else {\n      return (\n        <span key=\"search-input-icon\" className=\"icon is-small is-left\">\n          <i className=\"fas fa-search\" />\n        </span>\n      );\n    }\n  }\n}\n\nexport default ExampleList;\n","import MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\n\nfunction ExampleSVG() {\n  const caffeine = \"CN1C=NC2=C1C(=O)N(C(=O)N2C)\";\n  const aspirin = \"CC(=O)Oc1ccccc1C(=O)O\";\n\n  return (\n    <div id=\"component-example-svg\" className=\"container\">\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title\">SVG Rendering</p>\n          <p className=\"subtitle\">You can render molecules using svg.</p>\n        </div>\n      </section>\n      <div className=\"columns is-desktop\">\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-svg-caffeine\"\n            structure={caffeine}\n            width={350}\n            height={300}\n            svgMode\n          />\n        </div>\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-svg-aspirin\"\n            structure={aspirin}\n            width={350}\n            height={300}\n            svgMode\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleSVG;\n","import MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\n\nfunction ExampleCanvas() {\n  const caffeine = \"CN1C=NC2=C1C(=O)N(C(=O)N2C)\";\n  const aspirin = \"CC(=O)Oc1ccccc1C(=O)O\";\n\n  return (\n    <div id=\"component-example-canvas\" className=\"container\">\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title\">Canvas rendering</p>\n          <p className=\"subtitle\">\n            You can also render molecules using the HTML Canvas API.\n          </p>\n        </div>\n      </section>\n      <div className=\"columns is-desktop\">\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-canvas-caffeine\"\n            structure={caffeine}\n            width={350}\n            height={300}\n          />\n        </div>\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-canvas-aspirin\"\n            structure={aspirin}\n            width={350}\n            height={300}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleCanvas;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport hexRgb from \"hex-rgb\";\nimport MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\n\nclass ExampleDrawingOptions extends React.Component {\n  static initialState = {\n    computing: false,\n    mainStructureInput: \"CN1C=NC2=C1C(=O)N(C(=O)N2C)\",\n    subStructureInput: \"[n,O]\",\n    legend: \"Legend Text\",\n    width: 350,\n    height: 250,\n    bondLineWidth: 1,\n    addStereoAnnotation: true,\n    addAtomIndices: true,\n    explicitMethyl: true,\n    highlightColour: \"#fd5c63\",\n    legendColour: \"#000000\",\n    symbolColour: \"#000000\",\n    backgroundColour: \"#ffffff\",\n  };\n\n  state = { ...ExampleDrawingOptions.initialState };\n\n  render() {\n    return (\n      <div id=\"component-example-drawing-options\" className=\"container\">\n        <section className=\"hero\">\n          <div className=\"hero-body\">\n            <p className=\"title\">Additional Drawing Options</p>\n            <p className=\"subtitle\">\n              RDKit.js provides you with all these additional options.\n            </p>\n          </div>\n        </section>\n        <div className=\"columns\" style={{ margin: \"12px 0\" }}>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Main Structure</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  defaultValue={this.state.mainStructureInput}\n                  onChange={(e) =>\n                    this.handleStateChange(e, \"mainStructureInput\")\n                  }\n                  placeholder=\"Enter a SMILES string here...\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"columns\" style={{ margin: \"12px 0\" }}>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Substructure</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  defaultValue={this.state.subStructureInput}\n                  onChange={(e) =>\n                    this.handleStateChange(e, \"subStructureInput\")\n                  }\n                  placeholder=\"Enter a SMILES or SMARTS string here...\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"columns\" style={{ margin: \"12px 0\" }}>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Legend</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  defaultValue={this.state.legend}\n                  onChange={(e) => this.handleStateChange(e, \"legend\")}\n                  placeholder=\"Add a legend here...\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"columns\" style={{ margin: \"12px 0\" }}>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Width</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  defaultValue={this.state.width}\n                  onChange={(e) => this.handleStateChange(e, \"width\")}\n                  placeholder=\"Width\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Height</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  defaultValue={this.state.height}\n                  onChange={(e) => this.handleStateChange(e, \"height\")}\n                  placeholder=\"Height\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Bond line width</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  defaultValue={this.state.bondLineWidth}\n                  onChange={(e) => this.handleStateChange(e, \"bondLineWidth\")}\n                  placeholder=\"Bond line width\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Stereo-Annotation</label>\n              <div className=\"control\">\n                <input\n                  className=\"checkbox\"\n                  type=\"checkbox\"\n                  defaultChecked={this.state.addStereoAnnotation}\n                  onChange={(e) =>\n                    this.handleStateChange(e, \"addStereoAnnotation\")\n                  }\n                  placeholder=\"Stereo-Annotation\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Atom Indices</label>\n              <div className=\"control\">\n                <input\n                  className=\"checkbox\"\n                  type=\"checkbox\"\n                  defaultChecked={this.state.addAtomIndices}\n                  onChange={(e) => this.handleStateChange(e, \"addAtomIndices\")}\n                  placeholder=\"Atom Indices\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Explicit Methyl</label>\n              <div className=\"control\">\n                <input\n                  className=\"checkbox\"\n                  type=\"checkbox\"\n                  defaultChecked={this.state.explicitMethyl}\n                  onChange={(e) => this.handleStateChange(e, \"explicitMethyl\")}\n                  placeholder=\"Explicit Methyl\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"columns\" style={{ margin: \"12px 0\" }}>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Highlight Colour</label>\n              <div className=\"control\">\n                <input\n                  type=\"color\"\n                  className=\"input\"\n                  defaultValue={this.state.highlightColour}\n                  onChange={(e) => this.handleStateChange(e, \"highlightColour\")}\n                  placeholder=\"Highlight Colour\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Background Colour</label>\n              <div className=\"control\">\n                <input\n                  type=\"color\"\n                  className=\"input\"\n                  defaultValue={this.state.backgroundColour}\n                  onChange={(e) =>\n                    this.handleStateChange(e, \"backgroundColour\")\n                  }\n                  placeholder=\"Background Colour\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Legend Colour</label>\n              <div className=\"control\">\n                <input\n                  type=\"color\"\n                  className=\"input\"\n                  defaultValue={this.state.legendColour}\n                  onChange={(e) => this.handleStateChange(e, \"legendColour\")}\n                  placeholder=\"Legend Colour\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Symbol Colour</label>\n              <div className=\"control\">\n                <input\n                  type=\"color\"\n                  className=\"input\"\n                  defaultValue={this.state.symbolColour}\n                  onChange={(e) => this.handleStateChange(e, \"symbolColour\")}\n                  placeholder=\"Symbol Colour\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.renderContent()}\n      </div>\n    );\n  }\n\n  renderContent() {\n    const width = this.state.width || 250;\n    const height = this.state.width || 250;\n    const bondLineWidth = this.state.bondLineWidth || 1;\n    const addStereoAnnotation = this.state.addStereoAnnotation || false;\n    const addAtomIndices = this.state.addAtomIndices || false;\n    const explicitMethyl = this.state.explicitMethyl || false;\n    const highlightColour = this.getColourProportionsFromHex(\n      this.state.highlightColour\n    );\n    const legendColour = this.getColourProportionsFromHex(\n      this.state.legendColour\n    );\n    const backgroundColour = this.getColourProportionsFromHex(\n      this.state.backgroundColour\n    );\n    const symbolColour = this.getColourProportionsFromHex(\n      this.state.symbolColour\n    );\n\n    if (this.state.computing) {\n      return (\n        <div className=\"columns\">\n          <div className=\"column\">\n            <span\n              style={{ width: width, height: height }}\n              key=\"computing-input-icon\"\n              className=\"icon is-small is-left\"\n            >\n              <i className=\"fas fa-circle-notch fa-spin\" />\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"columns\">\n        <div className=\"column\" style={{ margin: \"12px 12px\" }}>\n          <div\n            style={{\n              width: width + 12,\n              height: height + 12,\n              border: \"1px solid rgba(0,0,0,.1)\",\n              borderRadius: \"2px\",\n            }}\n          >\n            <MoleculeStructure\n              id=\"structure-example-drawing-options-caffeine\"\n              structure={this.state.mainStructureInput}\n              subStructure={this.state.subStructureInput}\n              width={width}\n              height={height}\n              extraDetails={{\n                legend: this.state.legend || \"\",\n                bondLineWidth,\n                addStereoAnnotation,\n                addAtomIndices,\n                explicitMethyl,\n                highlightColour,\n                legendColour,\n                backgroundColour,\n                symbolColour,\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderInputIcon() {\n    if (this.state.computing) {\n      return (\n        <span key=\"computing-input-icon\" className=\"icon is-small is-left\">\n          <i className=\"fas fa-circle-notch fa-spin\" />\n        </span>\n      );\n    } else {\n      return (\n        <span key=\"search-input-icon\" className=\"icon is-small is-left\">\n          <i className=\"fas fa-search\" />\n        </span>\n      );\n    }\n  }\n\n  handleStateChange = _.debounce((e, stateProp) => {\n    this.setState({ computing: true });\n\n    setTimeout(() => {\n      let value;\n      if (e.target.type === \"number\") {\n        value = parseFloat(e.target.value, 10);\n      } else if (e.target.type === \"checkbox\") {\n        value = !!e.target.checked;\n      } else {\n        value = e.target.value;\n      }\n\n      this.setState({ [stateProp]: value });\n      this.setState({ computing: false });\n    }, 100);\n  }, 300);\n\n  getColourProportionsFromHex(hex) {\n    return hexRgb(hex, { format: \"array\" }).map((v) =>\n      parseFloat((v / 255).toFixed(2), 10)\n    );\n  }\n}\n\nexport default ExampleDrawingOptions;\n","import React from \"react\";\nimport MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\nimport { SMILES_LIST } from \"../utils/smiles\";\n\nclass ExampleList extends React.Component {\n  render() {\n    return (\n      <div id=\"component-example-list\" className=\"container\">\n        <section className=\"hero\">\n          <div className=\"hero-body\">\n            <p className=\"title\">Overview</p>\n            <p className=\"subtitle\">\n              You can draw any molecule from SMILES dynamically with rdkit.js .\n            </p>\n          </div>\n        </section>\n        <div\n          id=\"structure-list\"\n          className=\"columns is-desktop\"\n          style={{ margin: \"12px\", overflowX: \"scroll\" }}\n        >\n          {SMILES_LIST.map((smiles) => (\n            <div className=\"column\" key={smiles}>\n              <MoleculeStructure\n                id={smiles}\n                structure={smiles}\n                height={200}\n                width={200}\n                svgMode\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ExampleList;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Store } from \"./redux/store\";\nimport Introduction from \"./components/Introduction/Introduction\";\nimport CodeExample from \"./components/CodeExample/CodeExample\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport SideNav from \"./components/SideNav/SideNav\";\nimport ExampleMoleculeStructure from \"./examples/ExampleMoleculeStructure\";\nimport ExampleSubstructure from \"./examples/ExampleSubstructure\";\nimport ExampleMultiSubstructure from \"./examples/ExampleMultiSubstructure\";\nimport ExampleSubstructureSearch from \"./examples/ExampleSubstructureSearch\";\nimport ExampleSVG from \"./examples/ExampleSvg\";\nimport ExampleCanvas from \"./examples/ExampleCanvas\";\nimport ExampleDrawingOptions from \"./examples/ExampleDrawingOptions\";\nimport ExampleList from \"./examples/ExampleList\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport MoleculeStructureCode from \"!!raw-loader!./components/MoleculeStructure/MoleculeStructure\";\nimport ExampleSVGCode from \"!!raw-loader!./examples/ExampleSvg.js\";\nimport ExampleCanvasCode from \"!!raw-loader!./examples/ExampleCanvas.js\";\nimport ExampleSubstructureCode from \"!!raw-loader!./examples/ExampleSubstructure.js\";\nimport ExampleMultiSubstructureCode from \"!!raw-loader!./examples/ExampleMultiSubstructure.js\";\nimport ExampleDrawingOptionsCode from \"!!raw-loader!./examples/ExampleDrawingOptions.js\";\nimport ExampleSubstructureSearchCode from \"!!raw-loader!./examples/ExampleSubstructureSearch\";\nimport ExampleListCode from \"!!raw-loader!./examples/ExampleList.js\";\nimport \"./index.css\";\nimport { setRDKitState } from \"./redux/rdkit/actions\";\n\nwindow\n  .initRDKitModule()\n  .then((RDKit) => {\n    window.RDKit = RDKit;\n    Store.dispatch(setRDKitState(\"LOADED\"));\n  })\n  .catch(() => {\n    Store.dispatch(setRDKitState(\"ERROR\"));\n  });\n\nReactDOM.render(<NavBar />, document.getElementById(\"navbar\"));\nReactDOM.render(<SideNav />, document.getElementById(\"side-navigation\"));\nReactDOM.render(<Introduction />, document.getElementById(\"introduction\"));\n\nconst examples = [\n  {\n    code: ExampleListCode,\n    component: <ExampleList />,\n    elementId: \"example-list\",\n  },\n  {\n    code: MoleculeStructureCode,\n    component: <ExampleMoleculeStructure />,\n    elementId: \"example-mol-structure\",\n  },\n  {\n    code: ExampleSVGCode,\n    component: <ExampleSVG />,\n    elementId: \"example-svg\",\n  },\n  {\n    code: ExampleCanvasCode,\n    component: <ExampleCanvas />,\n    elementId: \"example-canvas\",\n  },\n  {\n    code: ExampleSubstructureCode,\n    component: <ExampleSubstructure />,\n    elementId: \"example-substructures\",\n  },\n  {\n    code: ExampleMultiSubstructureCode,\n    component: <ExampleMultiSubstructure />,\n    elementId: \"example-multi-substructures\",\n  },\n  {\n    code: ExampleDrawingOptionsCode,\n    component: <ExampleDrawingOptions />,\n    elementId: \"example-all-options\",\n  },\n  {\n    code: ExampleSubstructureSearchCode,\n    component: <ExampleSubstructureSearch />,\n    elementId: \"example-substructure-search\",\n  },\n];\n\nexamples.forEach((example) => {\n  ReactDOM.render(\n    <Provider store={Store}>\n      <CodeExample code={example.code}>{example.component}</CodeExample>\n    </Provider>,\n    document.getElementById(example.elementId)\n  );\n});\n","export default \"import React from \\\"react\\\";\\nimport MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\nimport { SMILES_LIST } from \\\"../utils/smiles\\\";\\n\\nclass ExampleList extends React.Component {\\n  render() {\\n    return (\\n      <div id=\\\"component-example-list\\\" className=\\\"container\\\">\\n        <section className=\\\"hero\\\">\\n          <div className=\\\"hero-body\\\">\\n            <p className=\\\"title\\\">Overview</p>\\n            <p className=\\\"subtitle\\\">\\n              You can draw any molecule from SMILES dynamically with rdkit.js .\\n            </p>\\n          </div>\\n        </section>\\n        <div\\n          id=\\\"structure-list\\\"\\n          className=\\\"columns is-desktop\\\"\\n          style={{ margin: \\\"12px\\\", overflowX: \\\"scroll\\\" }}\\n        >\\n          {SMILES_LIST.map((smiles) => (\\n            <div className=\\\"column\\\" key={smiles}>\\n              <MoleculeStructure\\n                id={smiles}\\n                structure={smiles}\\n                height={200}\\n                width={200}\\n                svgMode\\n              />\\n            </div>\\n          ))}\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default ExampleList;\\n\";","export default \"import React, { Component } from \\\"react\\\";\\nimport { connect } from \\\"react-redux\\\";\\nimport _ from \\\"lodash\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport \\\"./MoleculeStructure.css\\\";\\n\\nclass MoleculeStructure extends Component {\\n  static propTypes = {\\n    /**\\n     * Generic properties\\n     */\\n    id: PropTypes.string.isRequired,\\n    className: PropTypes.string,\\n    svgMode: PropTypes.bool,\\n    width: PropTypes.number,\\n    height: PropTypes.number,\\n    /**\\n     * RDKit-specific properties\\n     */\\n    structure: PropTypes.string.isRequired,\\n    subStructure: PropTypes.string,\\n    extraDetails: PropTypes.object,\\n    drawingDelay: PropTypes.number,\\n  };\\n\\n  static defaultProps = {\\n    subStructure: \\\"\\\",\\n    className: \\\"\\\",\\n    width: 250,\\n    height: 200,\\n    svgMode: false,\\n    extraDetails: {},\\n    drawingDelay: undefined,\\n  };\\n\\n  constructor(props) {\\n    super(props);\\n\\n    this.MOL_DETAILS = {\\n      width: this.props.width,\\n      height: this.props.height,\\n      bondLineWidth: 1,\\n      addStereoAnnotation: true,\\n      ...this.props.extraDetails,\\n    };\\n\\n    this.state = {\\n      svg: undefined,\\n    };\\n  }\\n\\n  draw() {\\n    if (this.props.drawingDelay) {\\n      setTimeout(() => {\\n        this.drawSVGorCanvas();\\n      }, this.props.drawingDelay);\\n    } else {\\n      this.drawSVGorCanvas();\\n    }\\n  }\\n\\n  drawSVGorCanvas() {\\n    const mol = window.RDKit.get_mol(this.props.structure || \\\"invalid\\\");\\n    const qmol = window.RDKit.get_qmol(this.props.subStructure || \\\"invalid\\\");\\n\\n    if (this.props.svgMode && this.isValidMol(mol)) {\\n      const svg = mol.get_svg_with_highlights(this.getMolDetails(mol, qmol));\\n      this.setState({ svg });\\n    } else if (this.isValidMol(mol)) {\\n      const canvas = document.getElementById(this.props.id);\\n      mol.draw_to_canvas_with_highlights(canvas, this.getMolDetails(mol, qmol));\\n    }\\n\\n    /**\\n     * Delete C++ mol objects manually\\n     * https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html#memory-management\\n     */\\n    mol.delete();\\n    qmol.delete();\\n  }\\n\\n  isValidMol(mol) {\\n    return !!mol && mol.is_valid();\\n  }\\n\\n  getMolDetails(mol, qmol) {\\n    if (this.isValidMol(mol) && this.isValidMol(qmol)) {\\n      const subStructHighlightDetails = JSON.parse(\\n        mol.get_substruct_matches(qmol)\\n      );\\n      const subStructHighlightDetailsMerged = !_.isEmpty(\\n        subStructHighlightDetails\\n      )\\n        ? subStructHighlightDetails.reduce(\\n            (acc, { atoms, bonds }) => ({\\n              atoms: [...acc.atoms, ...atoms],\\n              bonds: [...acc.bonds, ...bonds],\\n            }),\\n            { bonds: [], atoms: [] }\\n          )\\n        : subStructHighlightDetails;\\n      return JSON.stringify({\\n        ...this.MOL_DETAILS,\\n        ...(this.props.extraDetails || {}),\\n        ...subStructHighlightDetailsMerged,\\n      });\\n    } else {\\n      return JSON.stringify({\\n        ...this.MOL_DETAILS,\\n        ...(this.props.extraDetails || {}),\\n      });\\n    }\\n  }\\n\\n  componentDidMount() {\\n    if (this.props.rdKitState === \\\"LOADED\\\") {\\n      this.draw();\\n    }\\n  }\\n\\n  componentDidUpdate(prevProps) {\\n    const shouldUpdateDrawing =\\n      (prevProps.rdKitState !== \\\"LOADED\\\" &&\\n        this.props.rdKitState === \\\"LOADED\\\") ||\\n      prevProps.structure !== this.props.structure ||\\n      prevProps.subStructure !== this.props.subStructure ||\\n      prevProps.width !== this.props.width ||\\n      prevProps.height !== this.props.height ||\\n      !_.isEqual(prevProps.extraDetails, this.props.extraDetails);\\n\\n    if (shouldUpdateDrawing) {\\n      this.draw();\\n    }\\n  }\\n\\n  render() {\\n    if (this.props.rdKitState === \\\"ERROR\\\") {\\n      return \\\"Error loading renderer.\\\";\\n    }\\n\\n    if (this.props.rdKitState === \\\"LOADED\\\") {\\n      const mol = window.RDKit.get_mol(this.props.structure || \\\"invalid\\\");\\n      const isValidMol = this.isValidMol(mol);\\n      mol.delete();\\n\\n      if (!isValidMol) {\\n        return (\\n          <span title={`Cannot render structure: ${this.props.structure}`}>\\n            Render Error.\\n          </span>\\n        );\\n      } else if (this.props.svgMode) {\\n        return (\\n          <div\\n            title={this.props.structure}\\n            className={\\\"molecule-structure-svg \\\" + (this.props.className || \\\"\\\")}\\n            style={{ width: this.props.width, height: this.props.height }}\\n            dangerouslySetInnerHTML={{ __html: this.state.svg }}\\n          ></div>\\n        );\\n      } else {\\n        return (\\n          <div\\n            className={\\n              \\\"molecule-canvas-container \\\" + (this.props.className || \\\"\\\")\\n            }\\n          >\\n            <canvas\\n              title={this.props.structure}\\n              id={this.props.id}\\n              width={this.props.width}\\n              height={this.props.height}\\n            ></canvas>\\n          </div>\\n        );\\n      }\\n    }\\n\\n    return \\\"Loading renderer...\\\";\\n  }\\n}\\n\\nconst mapStateToProps = ({ rdKitState }) => ({\\n  rdKitState,\\n});\\n\\nexport default connect(mapStateToProps)(MoleculeStructure);\\n\";","export default \"import MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nfunction ExampleSVG() {\\n  const caffeine = \\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)\\\";\\n  const aspirin = \\\"CC(=O)Oc1ccccc1C(=O)O\\\";\\n\\n  return (\\n    <div id=\\\"component-example-svg\\\" className=\\\"container\\\">\\n      <section className=\\\"hero\\\">\\n        <div className=\\\"hero-body\\\">\\n          <p className=\\\"title\\\">SVG Rendering</p>\\n          <p className=\\\"subtitle\\\">You can render molecules using svg.</p>\\n        </div>\\n      </section>\\n      <div className=\\\"columns is-desktop\\\">\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-svg-caffeine\\\"\\n            structure={caffeine}\\n            width={350}\\n            height={300}\\n            svgMode\\n          />\\n        </div>\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-svg-aspirin\\\"\\n            structure={aspirin}\\n            width={350}\\n            height={300}\\n            svgMode\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default ExampleSVG;\\n\";","export default \"import MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nfunction ExampleCanvas() {\\n  const caffeine = \\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)\\\";\\n  const aspirin = \\\"CC(=O)Oc1ccccc1C(=O)O\\\";\\n\\n  return (\\n    <div id=\\\"component-example-canvas\\\" className=\\\"container\\\">\\n      <section className=\\\"hero\\\">\\n        <div className=\\\"hero-body\\\">\\n          <p className=\\\"title\\\">Canvas rendering</p>\\n          <p className=\\\"subtitle\\\">\\n            You can also render molecules using the HTML Canvas API.\\n          </p>\\n        </div>\\n      </section>\\n      <div className=\\\"columns is-desktop\\\">\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-canvas-caffeine\\\"\\n            structure={caffeine}\\n            width={350}\\n            height={300}\\n          />\\n        </div>\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-canvas-aspirin\\\"\\n            structure={aspirin}\\n            width={350}\\n            height={300}\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default ExampleCanvas;\\n\";","export default \"import MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nfunction ExampleSubstructure() {\\n  const caffeine = \\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)\\\";\\n  const caffeineSubStruct = \\\"[N,n,O;!H0]\\\";\\n\\n  const aspirin = \\\"CC(=O)Oc1ccccc1C(=O)O\\\";\\n  const aspirinSubStruct = \\\"CC(=O)Oc1ccccc1C\\\";\\n\\n  return (\\n    <div id=\\\"component-example-substruct\\\" className=\\\"container\\\">\\n      <section className=\\\"hero\\\">\\n        <div className=\\\"hero-body\\\">\\n          <p className=\\\"title\\\">Substructure Highlight</p>\\n          <p className=\\\"subtitle\\\">\\n            You can also highlight substructure of molecules with both the SVG\\n            and Canvas APIs.\\n          </p>\\n        </div>\\n      </section>\\n      <div className=\\\"columns is-desktop\\\">\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-substruct-svg-caffeine\\\"\\n            structure={caffeine}\\n            subStructure={caffeineSubStruct}\\n            width={350}\\n            height={300}\\n            svgMode\\n          />\\n        </div>\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-subsctruct-canvas-aspirin\\\"\\n            structure={aspirin}\\n            subStructure={aspirinSubStruct}\\n            width={350}\\n            height={300}\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default ExampleSubstructure;\\n\";","export default \"import MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nfunction ExampleMultiSubstructure() {\\n  const caffeine = \\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)\\\";\\n  const caffeineSubStruct = \\\"[N,n,o,O]\\\";\\n\\n  const aspirin = \\\"CC(=O)Oc1ccccc1C(=O)O\\\";\\n  const aspirinSubStruct = \\\"[O,o].c1ccccc1\\\";\\n\\n  return (\\n    <div id=\\\"component-example-multi-substruct\\\" className=\\\"container\\\">\\n      <section className=\\\"hero\\\">\\n        <div className=\\\"hero-body\\\">\\n          <p className=\\\"title\\\">Multi-substructure Highlight</p>\\n          <p className=\\\"subtitle\\\">\\n            You can also highlight multiple substructures of molecules with\\n            SMILES, SMARTS and a combination of the two with dot notation.\\n          </p>\\n        </div>\\n      </section>\\n      <div className=\\\"columns is-desktop\\\">\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-multisubstruct-svg-caffeine\\\"\\n            structure={caffeine}\\n            subStructure={caffeineSubStruct}\\n            width={350}\\n            height={300}\\n            svgMode\\n          />\\n        </div>\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-multisubsctruct-canvas-aspirin\\\"\\n            structure={aspirin}\\n            subStructure={aspirinSubStruct}\\n            width={350}\\n            height={300}\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default ExampleMultiSubstructure;\\n\";","export default \"import React from \\\"react\\\";\\nimport _ from \\\"lodash\\\";\\nimport hexRgb from \\\"hex-rgb\\\";\\nimport MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nclass ExampleDrawingOptions extends React.Component {\\n  static initialState = {\\n    computing: false,\\n    mainStructureInput: \\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)\\\",\\n    subStructureInput: \\\"[n,O]\\\",\\n    legend: \\\"Legend Text\\\",\\n    width: 350,\\n    height: 250,\\n    bondLineWidth: 1,\\n    addStereoAnnotation: true,\\n    addAtomIndices: true,\\n    explicitMethyl: true,\\n    highlightColour: \\\"#fd5c63\\\",\\n    legendColour: \\\"#000000\\\",\\n    symbolColour: \\\"#000000\\\",\\n    backgroundColour: \\\"#ffffff\\\",\\n  };\\n\\n  state = { ...ExampleDrawingOptions.initialState };\\n\\n  render() {\\n    return (\\n      <div id=\\\"component-example-drawing-options\\\" className=\\\"container\\\">\\n        <section className=\\\"hero\\\">\\n          <div className=\\\"hero-body\\\">\\n            <p className=\\\"title\\\">Additional Drawing Options</p>\\n            <p className=\\\"subtitle\\\">\\n              RDKit.js provides you with all these additional options.\\n            </p>\\n          </div>\\n        </section>\\n        <div className=\\\"columns\\\" style={{ margin: \\\"12px 0\\\" }}>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Main Structure</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  defaultValue={this.state.mainStructureInput}\\n                  onChange={(e) =>\\n                    this.handleStateChange(e, \\\"mainStructureInput\\\")\\n                  }\\n                  placeholder=\\\"Enter a SMILES string here...\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div className=\\\"columns\\\" style={{ margin: \\\"12px 0\\\" }}>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Substructure</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  defaultValue={this.state.subStructureInput}\\n                  onChange={(e) =>\\n                    this.handleStateChange(e, \\\"subStructureInput\\\")\\n                  }\\n                  placeholder=\\\"Enter a SMILES or SMARTS string here...\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div className=\\\"columns\\\" style={{ margin: \\\"12px 0\\\" }}>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Legend</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  defaultValue={this.state.legend}\\n                  onChange={(e) => this.handleStateChange(e, \\\"legend\\\")}\\n                  placeholder=\\\"Add a legend here...\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div className=\\\"columns\\\" style={{ margin: \\\"12px 0\\\" }}>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Width</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  type=\\\"number\\\"\\n                  defaultValue={this.state.width}\\n                  onChange={(e) => this.handleStateChange(e, \\\"width\\\")}\\n                  placeholder=\\\"Width\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Height</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  type=\\\"number\\\"\\n                  defaultValue={this.state.height}\\n                  onChange={(e) => this.handleStateChange(e, \\\"height\\\")}\\n                  placeholder=\\\"Height\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Bond line width</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  type=\\\"number\\\"\\n                  defaultValue={this.state.bondLineWidth}\\n                  onChange={(e) => this.handleStateChange(e, \\\"bondLineWidth\\\")}\\n                  placeholder=\\\"Bond line width\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Stereo-Annotation</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"checkbox\\\"\\n                  type=\\\"checkbox\\\"\\n                  defaultChecked={this.state.addStereoAnnotation}\\n                  onChange={(e) =>\\n                    this.handleStateChange(e, \\\"addStereoAnnotation\\\")\\n                  }\\n                  placeholder=\\\"Stereo-Annotation\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Atom Indices</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"checkbox\\\"\\n                  type=\\\"checkbox\\\"\\n                  defaultChecked={this.state.addAtomIndices}\\n                  onChange={(e) => this.handleStateChange(e, \\\"addAtomIndices\\\")}\\n                  placeholder=\\\"Atom Indices\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Explicit Methyl</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"checkbox\\\"\\n                  type=\\\"checkbox\\\"\\n                  defaultChecked={this.state.explicitMethyl}\\n                  onChange={(e) => this.handleStateChange(e, \\\"explicitMethyl\\\")}\\n                  placeholder=\\\"Explicit Methyl\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div className=\\\"columns\\\" style={{ margin: \\\"12px 0\\\" }}>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Highlight Colour</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  type=\\\"color\\\"\\n                  className=\\\"input\\\"\\n                  defaultValue={this.state.highlightColour}\\n                  onChange={(e) => this.handleStateChange(e, \\\"highlightColour\\\")}\\n                  placeholder=\\\"Highlight Colour\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Background Colour</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  type=\\\"color\\\"\\n                  className=\\\"input\\\"\\n                  defaultValue={this.state.backgroundColour}\\n                  onChange={(e) =>\\n                    this.handleStateChange(e, \\\"backgroundColour\\\")\\n                  }\\n                  placeholder=\\\"Background Colour\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Legend Colour</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  type=\\\"color\\\"\\n                  className=\\\"input\\\"\\n                  defaultValue={this.state.legendColour}\\n                  onChange={(e) => this.handleStateChange(e, \\\"legendColour\\\")}\\n                  placeholder=\\\"Legend Colour\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Symbol Colour</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  type=\\\"color\\\"\\n                  className=\\\"input\\\"\\n                  defaultValue={this.state.symbolColour}\\n                  onChange={(e) => this.handleStateChange(e, \\\"symbolColour\\\")}\\n                  placeholder=\\\"Symbol Colour\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        {this.renderContent()}\\n      </div>\\n    );\\n  }\\n\\n  renderContent() {\\n    const width = this.state.width || 250;\\n    const height = this.state.width || 250;\\n    const bondLineWidth = this.state.bondLineWidth || 1;\\n    const addStereoAnnotation = this.state.addStereoAnnotation || false;\\n    const addAtomIndices = this.state.addAtomIndices || false;\\n    const explicitMethyl = this.state.explicitMethyl || false;\\n    const highlightColour = this.getColourProportionsFromHex(\\n      this.state.highlightColour\\n    );\\n    const legendColour = this.getColourProportionsFromHex(\\n      this.state.legendColour\\n    );\\n    const backgroundColour = this.getColourProportionsFromHex(\\n      this.state.backgroundColour\\n    );\\n    const symbolColour = this.getColourProportionsFromHex(\\n      this.state.symbolColour\\n    );\\n\\n    if (this.state.computing) {\\n      return (\\n        <div className=\\\"columns\\\">\\n          <div className=\\\"column\\\">\\n            <span\\n              style={{ width: width, height: height }}\\n              key=\\\"computing-input-icon\\\"\\n              className=\\\"icon is-small is-left\\\"\\n            >\\n              <i className=\\\"fas fa-circle-notch fa-spin\\\" />\\n            </span>\\n          </div>\\n        </div>\\n      );\\n    }\\n\\n    return (\\n      <div className=\\\"columns\\\">\\n        <div className=\\\"column\\\" style={{ margin: \\\"12px 12px\\\" }}>\\n          <div\\n            style={{\\n              width: width + 12,\\n              height: height + 12,\\n              border: \\\"1px solid rgba(0,0,0,.1)\\\",\\n              borderRadius: \\\"2px\\\",\\n            }}\\n          >\\n            <MoleculeStructure\\n              id=\\\"structure-example-drawing-options-caffeine\\\"\\n              structure={this.state.mainStructureInput}\\n              subStructure={this.state.subStructureInput}\\n              width={width}\\n              height={height}\\n              extraDetails={{\\n                legend: this.state.legend || \\\"\\\",\\n                bondLineWidth,\\n                addStereoAnnotation,\\n                addAtomIndices,\\n                explicitMethyl,\\n                highlightColour,\\n                legendColour,\\n                backgroundColour,\\n                symbolColour,\\n              }}\\n            />\\n          </div>\\n        </div>\\n      </div>\\n    );\\n  }\\n\\n  renderInputIcon() {\\n    if (this.state.computing) {\\n      return (\\n        <span key=\\\"computing-input-icon\\\" className=\\\"icon is-small is-left\\\">\\n          <i className=\\\"fas fa-circle-notch fa-spin\\\" />\\n        </span>\\n      );\\n    } else {\\n      return (\\n        <span key=\\\"search-input-icon\\\" className=\\\"icon is-small is-left\\\">\\n          <i className=\\\"fas fa-search\\\" />\\n        </span>\\n      );\\n    }\\n  }\\n\\n  handleStateChange = _.debounce((e, stateProp) => {\\n    this.setState({ computing: true });\\n\\n    setTimeout(() => {\\n      let value;\\n      if (e.target.type === \\\"number\\\") {\\n        value = parseFloat(e.target.value, 10);\\n      } else if (e.target.type === \\\"checkbox\\\") {\\n        value = !!e.target.checked;\\n      } else {\\n        value = e.target.value;\\n      }\\n\\n      this.setState({ [stateProp]: value });\\n      this.setState({ computing: false });\\n    }, 100);\\n  }, 300);\\n\\n  getColourProportionsFromHex(hex) {\\n    return hexRgb(hex, { format: \\\"array\\\" }).map((v) =>\\n      parseFloat((v / 255).toFixed(2), 10)\\n    );\\n  }\\n}\\n\\nexport default ExampleDrawingOptions;\\n\";","export default \"import React from \\\"react\\\";\\nimport _ from \\\"lodash\\\";\\nimport MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\nimport { SMILES_LIST } from \\\"../utils/smiles\\\";\\n\\nclass ExampleList extends React.Component {\\n  state = {\\n    matches: SMILES_LIST,\\n    searchValue: \\\"\\\",\\n    searching: false,\\n  };\\n\\n  render() {\\n    const matches = this.state.matches.slice(0, 50);\\n    return (\\n      <div id=\\\"component-example-substruct-search\\\" className=\\\"container\\\">\\n        <section className=\\\"hero\\\">\\n          <div className=\\\"hero-body\\\">\\n            <p className=\\\"title\\\">Substructure match</p>\\n            <p className=\\\"subtitle\\\">\\n              You can perform client-side substructure match.\\n            </p>\\n          </div>\\n        </section>\\n        <div className=\\\"columns\\\" style={{ margin: \\\"12px 0\\\" }}>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <div className=\\\"control has-icons-left\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  type=\\\"email\\\"\\n                  onChange={(e) => this.handleSearchChange(e)}\\n                  placeholder=\\\"Enter a SMARTS or SMILES string here...\\\"\\n                />\\n                {this.renderInputIcon()}\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div className=\\\"columns is-multiline\\\" style={{ margin: \\\"12px\\\" }}>\\n          {matches.length > 0\\n            ? matches.slice(0, 40).map((smiles) => (\\n                <div className=\\\"column\\\" key={smiles}>\\n                  <MoleculeStructure\\n                    id={smiles}\\n                    structure={smiles}\\n                    subStructure={this.state.searchValue}\\n                    height={200}\\n                    width={200}\\n                    svgMode\\n                  />\\n                </div>\\n              ))\\n            : \\\"Input is either invalid or no matches were found.\\\"}\\n        </div>\\n      </div>\\n    );\\n  }\\n\\n  handleSearchChange = _.debounce((e) => {\\n    this.setState({ searching: true });\\n\\n    setTimeout(() => {\\n      const noMatchLength = 2;\\n      const currentVal = e.target.value;\\n      this.setState({ searchValue: currentVal });\\n      if (!currentVal) {\\n        this.setState({ smilesList: SMILES_LIST });\\n      } else {\\n        const qmol = window.RDKit.get_qmol(currentVal);\\n        const matches = SMILES_LIST.filter((smiles) => {\\n          const mol = window.RDKit.get_mol(smiles);\\n          const hasMatch = mol.get_substruct_match(qmol).length > noMatchLength;\\n          mol.delete();\\n          return hasMatch;\\n        });\\n        this.setState({ matches });\\n        if (qmol.is_valid()) {\\n        } else {\\n          this.setState({ matches: [] });\\n        }\\n        qmol.delete();\\n      }\\n\\n      this.setState({ searching: false });\\n    }, 100);\\n  }, 300);\\n\\n  renderInputIcon() {\\n    if (this.state.searching) {\\n      return (\\n        <span key=\\\"searching-input-icon\\\" className=\\\"icon is-small is-left\\\">\\n          <i className=\\\"fas fa-circle-notch fa-spin\\\" />\\n        </span>\\n      );\\n    } else {\\n      return (\\n        <span key=\\\"search-input-icon\\\" className=\\\"icon is-small is-left\\\">\\n          <i className=\\\"fas fa-search\\\" />\\n        </span>\\n      );\\n    }\\n  }\\n}\\n\\nexport default ExampleList;\\n\";"],"sourceRoot":""}