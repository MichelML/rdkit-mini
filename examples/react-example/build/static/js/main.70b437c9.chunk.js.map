{"version":3,"sources":["components/Introduction/Introduction.js","components/CodeExample/CodeExample.js","components/NavBar/NavBar.js","components/SideNav/SideNav.js","examples/ExampleMoleculeStructure.js","utils/initRDKit.js","components/MoleculeStructure/MoleculeStructure.js","examples/ExampleSubstructure.js","examples/ExampleMultiSubstructure.js","utils/smiles.js","examples/ExampleSubstructureSearch.js","examples/ExampleSvg.js","examples/ExampleCanvas.js","examples/ExampleDrawingOptions.js","examples/ExampleList.js","index.js","webpack:///./src/examples/ExampleList.js?699a","webpack:///./src/components/MoleculeStructure/MoleculeStructure.js?34a0","webpack:///./src/examples/ExampleSvg.js?e959","webpack:///./src/examples/ExampleCanvas.js?b4aa","webpack:///./src/examples/ExampleSubstructure.js?a3ad","webpack:///./src/examples/ExampleMultiSubstructure.js?8628","webpack:///./src/examples/ExampleDrawingOptions.js?1990","webpack:///./src/examples/ExampleSubstructureSearch.js?2ee7"],"names":["Introduction","id","className","Component","CodeExample","code","children","trigger","language","style","a11yDark","NavBar","state","burgerActive","brugerActiveClass","this","padding","role","aria-label","href","alt","src","aria-expanded","data-target","onClick","setState","aria-hidden","data-tooltip","SideNav","activeLink","window","location","hash","length","name","map","section","Fragment","child","undefined","ExampleMoleculeStructure","initRDKit","rdkitLoadingPromise","Promise","resolve","reject","initRDKitModule","then","RDKit","catch","e","MoleculeStructure","props","MOL_DETAILS","width","height","bondLineWidth","addStereoAnnotation","extraDetails","svg","rdKitLoaded","rdKitError","drawingDelay","setTimeout","drawSVGorCanvas","mol","get_mol","structure","qmol","get_qmol","subStructure","svgMode","isValidMol","get_svg_with_highlights","getMolDetails","canvas","document","getElementById","draw_to_canvas_with_highlights","delete","is_valid","subStructHighlightDetails","JSON","parse","get_substruct_matches","subStructHighlightDetailsMerged","_","isEmpty","reduce","acc","atoms","bonds","stringify","draw","prevProps","isEqual","title","dangerouslySetInnerHTML","__html","defaultProps","ExampleSubstructure","ExampleMultiSubstructure","SMILES_LIST","ExampleList","matches","searchValue","searching","handleSearchChange","debounce","currentVal","target","value","filter","smiles","hasMatch","get_substruct_match","smilesList","slice","margin","type","onChange","placeholder","renderInputIcon","React","ExampleSVG","ExampleCanvas","ExampleDrawingOptions","initialState","handleStateChange","stateProp","computing","parseFloat","checked","defaultValue","mainStructureInput","subStructureInput","legend","legendFontSize","step","annotationFontScale","rotate","defaultChecked","addAtomIndices","addBondIndices","explicitMethyl","scaleBondWidth","centreMoleculesBeforeDrawing","comicMode","highlightColour","backgroundColour","legendColour","symbolColour","renderContent","getColourProportionsFromHex","border","borderRadius","hex","take","hexRgb","format","v","toFixed","overflowX","ReactDOM","render","component","elementId","ExampleSubstructureSearch","forEach","example"],"mappings":"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","file":"static/js/main.70b437c9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Introduction extends Component {\n  render() {\n    return (\n      <div id=\"component-introduction\" className=\"container\">\n        <section className=\"hero\">\n          <div className=\"hero-body\">\n            <p className=\"title\">Introduction</p>\n            <p className=\"subtitle\">Welcome to RDKit.js for React.</p>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n","import SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { a11yDark } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport ReactCollapsible from \"react-collapsible\";\n\nfunction CodeExample({ code, children }) {\n  return (\n    <>\n      {children}\n      <div className=\"container\">\n        <ReactCollapsible\n          trigger={\n            <button className=\"button is-primary is-light is-large is-fullwidth\">\n              See Code Example\n            </button>\n          }\n        >\n          <div className=\"container\">\n            <SyntaxHighlighter language=\"javascript\" style={a11yDark}>\n              {code}\n            </SyntaxHighlighter>\n          </div>\n        </ReactCollapsible>\n      </div>\n    </>\n  );\n}\n\nexport default CodeExample;\n","import React, { Component } from \"react\";\n\nexport default class NavBar extends Component {\n  state = {\n    burgerActive: false\n  };\n  render() {\n    const brugerActiveClass = this.state.burgerActive ? \" is-active\" : \"\";\n\n    return (\n      <nav\n        className=\"navbar has-shadow\"\n        style={{ padding: \"12px 0\" }}\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"navbar-brand\" style={{ padding: \"6px\" }}>\n          <a className=\"navbar-item\" href=\"#/\">\n            <img\n              alt=\"logo\"\n              src=\"/rdkit-js/examples/vanilla-javascript/public/rdkitjs_cropped_200.png\"\n            />\n          </a>\n\n          <a\n            role=\"button\"\n            className={`navbar-burger${brugerActiveClass}`}\n            aria-label=\"menu\"\n            aria-expanded=\"false\"\n            data-target=\"navbarBasicExample\"\n            href=\"#/\"\n            onClick={() => {\n              this.setState({ burgerActive: !this.state.burgerActive });\n            }}\n          >\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n          </a>\n        </div>\n\n        <div\n          id=\"navbarBasicExample\"\n          className={`navbar-menu${brugerActiveClass}`}\n        >\n          <div className=\"navbar-start\">\n            <a\n              className=\"navbar-item\"\n              href=\"https://github.com/MichelML/rdkit-js/tree/master/examples/vanilla-javascript\"\n            >\n              Source Code\n            </a>\n\n            <div className=\"navbar-item has-dropdown is-hoverable\">\n              <a className=\"navbar-link\" href=\"#/\">\n                {\" \"}\n                Examples{\" \"}\n              </a>\n\n              <div className=\"navbar-dropdown\">\n                <a\n                  className=\"navbar-item\"\n                  href=\"https://michelml.github.io/rdkit-js/examples/vanilla-javascript/\"\n                >\n                  JavaScript\n                </a>\n                <a\n                  className=\"navbar-item is-active\"\n                  href=\"https://michelml.github.io/rdkit-js/examples/react-example/build/\"\n                >\n                  React\n                </a>\n                <hr className=\"navbar-divider\" />\n                <a\n                  className=\"navbar-item\"\n                  href=\"https://github.com/MichelML/rdkit-js/issues\"\n                >\n                  Contribute\n                </a>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"navbar-end\">\n            <div className=\"navbar-item\">\n              <div className=\"buttons\">\n                <a\n                  data-tooltip=\"Go to main RDKit project\"\n                  className=\"button has-tooltip-bottom is-white is-big\"\n                  href=\"https://github.com/rdkit/rdkit\"\n                >\n                  <span className=\"icon\">\n                    <img\n                      alt=\"RDKit Logo\"\n                      src=\"/rdkit-js/examples/vanilla-javascript/public/rdkit.png\"\n                    />\n                  </span>\n                </a>\n              </div>\n            </div>\n            <div className=\"navbar-item\">\n              <div className=\"buttons\">\n                <a\n                  data-tooltip=\"Go to RDKit.js\"\n                  className=\"button has-tooltip-bottom is-white is-big\"\n                  href=\"https://github.com/MichelML/rdkit-js/tree/master/examples/react-example\"\n                >\n                  <span className=\"icon\">\n                    <i className=\"fab fa-github fa-2x\"></i>\n                  </span>\n                </a>\n              </div>\n            </div>\n            <div className=\"navbar-item\">\n              <div className=\"buttons mr-6\">\n                <a\n                  data-tooltip=\"Go to NPM package\"\n                  className=\"button has-tooltip-bottom is-white is-big\"\n                  href=\"https://www.npmjs.com/package/@rdkit/rdkit\"\n                >\n                  <span className=\"icon\">\n                    <i className=\"fab fa-npm fa-2x\"></i>\n                  </span>\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class SideNav extends Component {\n  state = {\n    activeLink: \"#component-introduction\"\n  };\n\n  componentDidMount() {\n    if (window.location.hash.length > 1) {\n      this.setState({ activeLink: window.location.hash });\n    }\n  }\n\n  render() {\n    const sections = [\n      {\n        name: \"General\",\n        children: [\n          {\n            id: \"#component-introduction\",\n            name: \"Introduction\"\n          },\n          {\n            id: \"#component-example-list\",\n            name: \"Overview\"\n          }\n        ]\n      },\n      {\n        name: \"Components\",\n        children: [\n          {\n            id: \"#component-example-moleculestructure\",\n            name: \"MoleculeStructure\"\n          }\n        ]\n      },\n      {\n        name: \"Examples\",\n        children: [\n          {\n            id: \"#component-example-svg\",\n            name: \"SVG Rendering\"\n          },\n          {\n            id: \"#component-example-canvas\",\n            name: \"Canvas Rendering\"\n          },\n          {\n            id: \"#component-example-substruct\",\n            name: \"Substructure Highlighting\"\n          },\n          {\n            id: \"#component-example-multi-substruct\",\n            name: \"Multi-Substructure Highlighting\"\n          },\n          {\n            id: \"#component-example-substruct-search\",\n            name: \"Substructure Search\"\n          },\n          {\n            id: \"#component-example-drawing-options\",\n            name: \"Additional Options\"\n          }\n        ]\n      }\n    ];\n\n    const renderedSections = sections.map((section) => (\n      <React.Fragment key={section.name}>\n        <p className=\"menu-label\">{section.name}</p>\n        <ul className=\"menu-list\">\n          {section.children.map((child) => (\n            <li key={child.id}>\n              <a\n                href={child.id}\n                className={\n                  this.state.activeLink === child.id ? \"is-active\" : undefined\n                }\n                onClick={() => this.setState({ activeLink: child.id })}\n              >\n                {child.name}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </React.Fragment>\n    ));\n\n    return renderedSections;\n  }\n}\n","function ExampleMoleculeStructure() {\n  return (\n    <div id=\"component-example-moleculestructure\" className=\"container\">\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title\">MoleculeStructure</p>\n          <p className=\"subtitle\">\n            The examples below will mostly use the React component{\" \"}\n            <code className=\"is-family-code\">MoleculeStructure</code> to render\n            the examples. You can see the React implementation in the code\n            below.\n          </p>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default ExampleMoleculeStructure;\n","const initRDKit = (() => {\n  let rdkitLoadingPromise;\n\n  return () => {\n    /**\n     * Utility function ensuring there's only one call made to load RDKit\n     * It returns a promise with the resolved RDKit API as value on success,\n     * and a rejected promise with the error on failure.\n     *\n     * The RDKit API is also attached to the global object on successful load.\n     */\n    if (!rdkitLoadingPromise) {\n      rdkitLoadingPromise = new Promise((resolve, reject) => {\n        window\n          .initRDKitModule()\n          .then((RDKit) => {\n            window.RDKit = RDKit;\n            resolve(RDKit);\n          })\n          .catch((e) => {\n            reject();\n          });\n      });\n    }\n\n    return rdkitLoadingPromise;\n  };\n})();\n\nexport default initRDKit;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport \"./MoleculeStructure.css\";\nimport initRDKit from \"../../utils/initRDKit\";\n\nclass MoleculeStructure extends Component {\n  static propTypes = {\n    /**\n     * Generic properties\n     */\n    id: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    svgMode: PropTypes.bool,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    /**\n     * RDKit-specific properties\n     */\n    structure: PropTypes.string.isRequired,\n    subStructure: PropTypes.string,\n    extraDetails: PropTypes.object,\n    drawingDelay: PropTypes.number\n  };\n\n  static defaultProps = {\n    subStructure: \"\",\n    className: \"\",\n    width: 250,\n    height: 200,\n    svgMode: false,\n    extraDetails: {},\n    drawingDelay: undefined\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.MOL_DETAILS = {\n      width: this.props.width,\n      height: this.props.height,\n      bondLineWidth: 1,\n      addStereoAnnotation: true,\n      ...this.props.extraDetails\n    };\n\n    this.state = {\n      svg: undefined,\n      rdKitLoaded: false,\n      rdKitError: false\n    };\n  }\n\n  draw() {\n    if (this.props.drawingDelay) {\n      setTimeout(() => {\n        this.drawSVGorCanvas();\n      }, this.props.drawingDelay);\n    } else {\n      this.drawSVGorCanvas();\n    }\n  }\n\n  drawSVGorCanvas() {\n    const mol = window.RDKit.get_mol(this.props.structure || \"invalid\");\n    const qmol = window.RDKit.get_qmol(this.props.subStructure || \"invalid\");\n\n    if (this.props.svgMode && this.isValidMol(mol)) {\n      const svg = mol.get_svg_with_highlights(this.getMolDetails(mol, qmol));\n      this.setState({ svg });\n    } else if (this.isValidMol(mol)) {\n      const canvas = document.getElementById(this.props.id);\n      mol.draw_to_canvas_with_highlights(canvas, this.getMolDetails(mol, qmol));\n    }\n\n    /**\n     * Delete C++ mol objects manually\n     * https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html#memory-management\n     */\n    mol.delete();\n    qmol.delete();\n  }\n\n  isValidMol(mol) {\n    return !!mol && mol.is_valid();\n  }\n\n  getMolDetails(mol, qmol) {\n    if (this.isValidMol(mol) && this.isValidMol(qmol)) {\n      const subStructHighlightDetails = JSON.parse(\n        mol.get_substruct_matches(qmol)\n      );\n      const subStructHighlightDetailsMerged = !_.isEmpty(\n        subStructHighlightDetails\n      )\n        ? subStructHighlightDetails.reduce(\n            (acc, { atoms, bonds }) => ({\n              atoms: [...acc.atoms, ...atoms],\n              bonds: [...acc.bonds, ...bonds]\n            }),\n            { bonds: [], atoms: [] }\n          )\n        : subStructHighlightDetails;\n      return JSON.stringify({\n        ...this.MOL_DETAILS,\n        ...(this.props.extraDetails || {}),\n        ...subStructHighlightDetailsMerged\n      });\n    } else {\n      return JSON.stringify({\n        ...this.MOL_DETAILS,\n        ...(this.props.extraDetails || {})\n      });\n    }\n  }\n\n  componentDidMount() {\n    initRDKit()\n      .then(() => {\n        this.setState({ rdKitLoaded: true });\n        this.draw();\n      })\n      .catch(() => {\n        this.setState({ rdKitError: true });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.state.rdKitLoaded) {\n      const shouldUpdateDrawing =\n        prevProps.structure !== this.props.structure ||\n        prevProps.subStructure !== this.props.subStructure ||\n        prevProps.width !== this.props.width ||\n        prevProps.height !== this.props.height ||\n        !_.isEqual(prevProps.extraDetails, this.props.extraDetails);\n\n      if (shouldUpdateDrawing) {\n        this.draw();\n      }\n    }\n  }\n\n  render() {\n    if (this.state.rdKitError) {\n      return \"Error loading renderer.\";\n    }\n    if (!this.state.rdKitLoaded) {\n      return \"Loading renderer...\";\n    }\n\n    const mol = window.RDKit.get_mol(this.props.structure || \"invalid\");\n    const isValidMol = this.isValidMol(mol);\n    mol.delete();\n\n    if (!isValidMol) {\n      return (\n        <span title={`Cannot render structure: ${this.props.structure}`}>\n          Render Error.\n        </span>\n      );\n    } else if (this.props.svgMode) {\n      return (\n        <div\n          title={this.props.structure}\n          className={\"molecule-structure-svg \" + (this.props.className || \"\")}\n          style={{ width: this.props.width, height: this.props.height }}\n          dangerouslySetInnerHTML={{ __html: this.state.svg }}\n        ></div>\n      );\n    } else {\n      return (\n        <div\n          className={\n            \"molecule-canvas-container \" + (this.props.className || \"\")\n          }\n        >\n          <canvas\n            title={this.props.structure}\n            id={this.props.id}\n            width={this.props.width}\n            height={this.props.height}\n          ></canvas>\n        </div>\n      );\n    }\n  }\n}\n\nexport default MoleculeStructure;\n","import MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\n\nfunction ExampleSubstructure() {\n  const caffeine = \"CN1C=NC2=C1C(=O)N(C(=O)N2C)\";\n  const caffeineSubStruct = \"[N,n,O;!H0]\";\n\n  const aspirin = \"CC(=O)Oc1ccccc1C(=O)O\";\n  const aspirinSubStruct = \"CC(=O)Oc1ccccc1C\";\n\n  return (\n    <div id=\"component-example-substruct\" className=\"container\">\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title\">Substructure Highlight</p>\n          <p className=\"subtitle\">\n            You can also highlight substructure of molecules with both the SVG\n            and Canvas APIs.\n          </p>\n        </div>\n      </section>\n      <div className=\"columns is-desktop\">\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-substruct-svg-caffeine\"\n            structure={caffeine}\n            subStructure={caffeineSubStruct}\n            width={350}\n            height={300}\n            svgMode\n          />\n        </div>\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-subsctruct-canvas-aspirin\"\n            structure={aspirin}\n            subStructure={aspirinSubStruct}\n            width={350}\n            height={300}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleSubstructure;\n","import MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\n\nfunction ExampleMultiSubstructure() {\n  const caffeine = \"CN1C=NC2=C1C(=O)N(C(=O)N2C)\";\n  const caffeineSubStruct = \"[N,n,o,O]\";\n\n  const aspirin = \"CC(=O)Oc1ccccc1C(=O)O\";\n  const aspirinSubStruct = \"[O,o].c1ccccc1\";\n\n  return (\n    <div id=\"component-example-multi-substruct\" className=\"container\">\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title\">Multi-substructure Highlight</p>\n          <p className=\"subtitle\">\n            You can also highlight multiple substructures of molecules with\n            SMILES, SMARTS and a combination of the two with dot notation.\n          </p>\n        </div>\n      </section>\n      <div className=\"columns is-desktop\">\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-multisubstruct-svg-caffeine\"\n            structure={caffeine}\n            subStructure={caffeineSubStruct}\n            width={350}\n            height={300}\n            svgMode\n          />\n        </div>\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-multisubsctruct-canvas-aspirin\"\n            structure={aspirin}\n            subStructure={aspirinSubStruct}\n            width={350}\n            height={300}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleMultiSubstructure;\n","/**\n * Taken from https://github.com/reymond-group/smilesDrawer/blob/master/example/drugbank.js\n */\n\nexport const SMILES_LIST = [\n  \"CC[C@H](C)[C@H](NC(=O)[C@H](CCC(O)=O)NC(=O)[C@H](CCC(O)=O)NC(=O)[C@H](CC1=CC=CC=C1)NC(=O)[C@H](CC(O)=O)NC(=O)CNC(=O)[C@H](CC(N)=O)NC(=O)CNC(=O)CNC(=O)CNC(=O)CNC(=O)[C@@H]1CCCN1C(=O)[C@H](CCCNC(N)=N)NC(=O)[C@@H]1CCCN1C(=O)[C@H](N)CC1=CC=CC=C1)C(=O)N1CCC[C@H]1C(=O)N[C@@H](CCC(O)=O)C(=O)N[C@@H](CCC(O)=O)C(=O)N[C@@H](CC1=CC=C(O)C=C1)C(=O)N[C@@H](CC(C)C)C(O)=O\",\n  \"CC(C)C[C@H](NC(=O)[C@@H](COC(C)(C)C)NC(=O)[C@H](CC1=CC=C(O)C=C1)NC(=O)[C@H](CO)NC(=O)[C@H](CC1=CNC2=CC=CC=C12)NC(=O)[C@H](CC1=CN=CN1)NC(=O)[C@@H]1CCC(=O)N1)C(=O)N[C@@H](CCCN=C(N)N)C(=O)N1CCC[C@H]1C(=O)NNC(N)=O\",\n  \"NC(=O)CC[C@@H]1NC(=O)[C@H](CC2=CC=CC=C2)NC(=O)[C@H](CC2=CC=C(O)C=C2)NC(=O)CCSSC[C@H](NC(=O)[C@H](CC(N)=O)NC1=O)C(=O)N1CCC[C@H]1C(=O)N[C@@H](CCCNC(N)=N)C(=O)NCC(N)=O\",\n  \"CC(C)C[C@H](NC(=O)[C@@H](CCCNC(N)=O)NC(=O)[C@H](CC1=CC=C(O)C=C1)NC(=O)[C@H](CO)NC(=O)[C@@H](CC1=CN=CC=C1)NC(=O)[C@@H](CC1=CC=C(Cl)C=C1)NC(=O)[C@@H](CC1=CC2=CC=CC=C2C=C1)NC(C)=O)C(=O)N[C@@H](CCCNC(N)=N)C(=O)N1CCC[C@H]1C(=O)N[C@H](C)C(N)=O\",\n  \"CC[C@@H]1NC(=O)[C@H]([C@H](O)[C@H](C)CC=CC)N(C)C(=O)[C@H](C(C)C)N(C)C(=O)[C@H](CC(C)C)N(C)C(=O)[C@H](CC(C)C)N(C)C(=O)[C@@H](C)NC(=O)[C@H](C)NC(=O)[C@H](CC(C)C)N(C)C(=O)[C@@H](NC(=O)[C@H](CC(C)C)N(C)C(=O)CN(C)C1=O)C(C)C\",\n  \"NCCCC[C@H](NC(=O)[C@@H]1CCCN1C(=O)[C@@H]1CSSC[C@H](N)C(=O)N[C@@H](CC2=CC=CC=C2)C(=O)N[C@@H](CC2=CC=CC=C2)C(=O)N[C@@H](CCC(N)=O)C(=O)N[C@@H](CC(N)=O)C(=O)N1)C(=O)NCC(N)=O\",\n  \"[H][C@]1(NC(=O)[C@H](CCCCN)NC(=O)[C@@H](CC2=CNC3=C2C=CC=C3)NC(=O)[C@H](CC2=CC=CC=C2)NC(=O)[C@H](CSSC[C@H](NC1=O)C(=O)N[C@H](CO)[C@@H](C)O)NC(=O)[C@H](N)CC1=CC=CC=C1)[C@@H](C)O\",\n  \"OC[C@H]1O[C@@H]([C@H](O)[C@@H]1OP(O)(=O)O[C@]([H])(C)CNC(=O)CC[C@]1(C)[C@@H](CC(=O)N)[C@@]2([H])N([Co]C#N)C1=C(C)/C1=N/C(=CC3=NC(=C(C)/C4=N[C@]2(C)[C@@](C)(CC(=O)N)[C@@H]4CCC(=O)N)[C@@](C)(CC(=O)N)[C@@H]3CCC(=O)N)/C(C)(C)[C@@H]1CCC(=O)N)N1C=NC2=CC(C)=C(C)C=C12\",\n  \"C[C@H](CCCC(C)(C)O)[C@@]1([H])CC[C@@]2([H])C(CCC[C@]12C)=CC=C1C[C@@H](O)C[C@H](O)C1=C\",\n  \"CC(C=CC=C(/C)C=CC1C(C)=CC(O)CC1(C)C)=C/C=C/C=C(C)/C=C/C=C(C)/C=C/C1=C(C)CC(O)CC1(C)C\",\n  \"C[C@H](CCCC(C)(C)O)[C@@]1([H])CC[C@@]2([H])C(CCC[C@]12C)=CC=C1C[C@@H](O)CCC1=C\",\n  \"CC(C)[C@@H](C)C=C[C@@H](C)[C@@]1([H])CC[C@@]2([H])C(CCC[C@]12C)=CC=C1C[C@@H](O)CCC1=C\",\n  \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](CO[P@](O)(=O)O[P@](O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)N2C=NC3=C(N)N=CN=C23)[C@@H](O)[C@H]1O\",\n  \"CC(C)CCC[C@@H](C)[C@@]1([H])CC[C@@]2([H])C(CCC[C@]12C)=CC=C1C[C@@H](O)CCC1=C\",\n  \"NC1=NC=NC2=C1N=CN2[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OP(O)(O)=O)[C@@H](O)[C@H]1O\",\n  \"[H][C@]12[C@H](C[C@H](O)C=C1C=C[C@H](C)[C@@H]2CC[C@@H](O)C[C@@H](O)CC(O)=O)OC(=O)[C@@H](C)CC\",\n  \"[H][C@@]12CCC[C@]1([H])N([C@@H](C2)C(O)=O)C(=O)[C@H](C)N[C@@H](CCC1=CC=CC=C1)C(=O)OCC\",\n  \"[H][C@@]12C[C@@]3([H])[C@]4([H])C[C@H](F)C5=CC(=O)C=C[C@]5(C)[C@@]4([H])[C@@H](O)C[C@]3(C)[C@@]1(OC(C)(C)O2)C(=O)CO\",\n  \"CSCC[C@H](NC(=O)[C@H](CC1=CNC2=C1C=CC=C2)NC(=O)CCNC(=O)OC(C)(C)C)C(=O)N[C@@H](CC(O)=O)C(=O)N[C@@H](CC1=CC=CC=C1)C(N)=O\",\n  \"CC[C@H]1OC(=O)[C@H](C)[C@@H](O[C@H]2C[C@@](C)(OC)[C@@H](O)[C@H](C)O2)[C@H](C)[C@@H](O[C@@H]2O[C@H](C)C[C@@H]([C@H]2O)N(C)C)[C@](C)(O)C[C@@H](C)C(=O)[C@H](C)[C@@H](O)[C@]1(C)O\",\n  \"[H]O[Co+]N1C2=C(C)/C3=N/C(=CC4=NC(=C(C)/C5=N[C@@](C)([C@@]1([H])[C@H](CC(=O)N)[C@@]2(C)CCC(=O)NC[C@@H](C)OP(=O)([O-])O[C@H]1[C@@H](O)[C@H](O[C@@H]1CO)N1C=NC2=CC(C)=C(C)C=C12)[C@@](C)(CC(N)=O)[C@@H]5CCC(=O)N)[C@@](C)(CC(=O)N)[C@@H]4CCC(=O)N)/C(C)(C)[C@@H]3CCC(=O)N\",\n];\n","import React from \"react\";\nimport _ from \"lodash\";\nimport MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\nimport { SMILES_LIST } from \"../utils/smiles\";\n\nclass ExampleList extends React.Component {\n  state = {\n    matches: SMILES_LIST,\n    searchValue: \"\",\n    searching: false\n  };\n\n  render() {\n    const matches = this.state.matches.slice(0, 50);\n    return (\n      <div id=\"component-example-substruct-search\" className=\"container\">\n        <section className=\"hero\">\n          <div className=\"hero-body\">\n            <p className=\"title\">Substructure match</p>\n            <p className=\"subtitle\">\n              You can perform client-side substructure match.\n            </p>\n          </div>\n        </section>\n        <div className=\"columns\" style={{ margin: \"12px 0\" }}>\n          <div className=\"column\">\n            <div className=\"field\">\n              <div className=\"control has-icons-left\">\n                <input\n                  className=\"input\"\n                  type=\"email\"\n                  onChange={(e) => this.handleSearchChange(e)}\n                  placeholder=\"Enter a SMARTS or SMILES string here...\"\n                />\n                {this.renderInputIcon()}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"columns is-multiline\" style={{ margin: \"12px\" }}>\n          {matches.length > 0\n            ? matches.slice(0, 40).map((smiles) => (\n                <div className=\"column\" key={smiles}>\n                  <MoleculeStructure\n                    id={smiles}\n                    structure={smiles}\n                    subStructure={this.state.searchValue}\n                    height={200}\n                    width={200}\n                    svgMode\n                  />\n                </div>\n              ))\n            : \"Input is either invalid or no matches were found.\"}\n        </div>\n      </div>\n    );\n  }\n\n  handleSearchChange = _.debounce((e) => {\n    this.setState({ searching: true });\n\n    setTimeout(() => {\n      const noMatchLength = 2;\n      const currentVal = e.target.value;\n      this.setState({ searchValue: currentVal });\n      if (!currentVal) {\n        this.setState({ smilesList: SMILES_LIST });\n      } else {\n        const qmol = window.RDKit.get_qmol(currentVal);\n        const matches = SMILES_LIST.filter((smiles) => {\n          const mol = window.RDKit.get_mol(smiles);\n          const hasMatch = mol.get_substruct_match(qmol).length > noMatchLength;\n          mol.delete();\n          return hasMatch;\n        });\n        this.setState({ matches });\n        if (qmol.is_valid()) {\n        } else {\n          this.setState({ matches: [] });\n        }\n        qmol.delete();\n      }\n\n      this.setState({ searching: false });\n    }, 100);\n  }, 300);\n\n  renderInputIcon() {\n    if (this.state.searching) {\n      return (\n        <span key=\"searching-input-icon\" className=\"icon is-small is-left\">\n          <i className=\"fas fa-circle-notch fa-spin\" />\n        </span>\n      );\n    } else {\n      return (\n        <span key=\"search-input-icon\" className=\"icon is-small is-left\">\n          <i className=\"fas fa-search\" />\n        </span>\n      );\n    }\n  }\n}\n\nexport default ExampleList;\n","import MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\n\nfunction ExampleSVG() {\n  const caffeine = \"CN1C=NC2=C1C(=O)N(C(=O)N2C)\";\n  const aspirin = \"CC(=O)Oc1ccccc1C(=O)O\";\n\n  return (\n    <div id=\"component-example-svg\" className=\"container\">\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title\">SVG Rendering</p>\n          <p className=\"subtitle\">You can render molecules using svg.</p>\n        </div>\n      </section>\n      <div className=\"columns is-desktop\">\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-svg-caffeine\"\n            structure={caffeine}\n            width={350}\n            height={300}\n            svgMode\n          />\n        </div>\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-svg-aspirin\"\n            structure={aspirin}\n            width={350}\n            height={300}\n            svgMode\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleSVG;\n","import MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\n\nfunction ExampleCanvas() {\n  const caffeine = \"CN1C=NC2=C1C(=O)N(C(=O)N2C)\";\n  const aspirin = \"CC(=O)Oc1ccccc1C(=O)O\";\n\n  return (\n    <div id=\"component-example-canvas\" className=\"container\">\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title\">Canvas rendering</p>\n          <p className=\"subtitle\">\n            You can also render molecules using the HTML Canvas API.\n          </p>\n        </div>\n      </section>\n      <div className=\"columns is-desktop\">\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-canvas-caffeine\"\n            structure={caffeine}\n            width={350}\n            height={300}\n          />\n        </div>\n        <div className=\"column\">\n          <MoleculeStructure\n            id=\"structure-example-canvas-aspirin\"\n            structure={aspirin}\n            width={350}\n            height={300}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleCanvas;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport hexRgb from \"hex-rgb\";\nimport MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\n\nclass ExampleDrawingOptions extends React.Component {\n  static initialState = {\n    computing: false,\n    mainStructureInput:\n      \"Cc1coc(-c2cn([C@@H]3O[C@H](COc4ccc5ccc(N6CCC6)nc5c4)[C@@H](O)[C@@H]3F)c3ncnc(N)c23)n1\",\n    subStructureInput: \"[n,O]\",\n    legend: \"Legend Text\",\n    legendFontSize: 16,\n    width: 500,\n    height: 450,\n    bondLineWidth: 1,\n    scaleBondWidth: false,\n    addStereoAnnotation: true,\n    addAtomIndices: true,\n    addBondIndices: false,\n    explicitMethyl: true,\n    centreMoleculesBeforeDrawing: false,\n    highlightColour: \"#fd5c63\",\n    legendColour: \"#000000\",\n    symbolColour: \"#000000\",\n    backgroundColour: \"#ffffff\",\n    rotate: 0.0,\n    annotationFontScale: 0.5,\n    comicMode: false,\n    svgMode: false\n  };\n\n  state = { ...ExampleDrawingOptions.initialState };\n\n  render() {\n    return (\n      <div id=\"component-example-drawing-options\" className=\"container\">\n        <section className=\"hero\">\n          <div className=\"hero-body\">\n            <p className=\"title\">Additional Drawing Options</p>\n            <p className=\"subtitle\">\n              RDKit.js provides you with all these additional options.\n            </p>\n          </div>\n        </section>\n        <div className=\"columns\" style={{ margin: \"12px 0\" }}>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Main Structure</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  defaultValue={this.state.mainStructureInput}\n                  onChange={(e) =>\n                    this.handleStateChange(e, \"mainStructureInput\")\n                  }\n                  placeholder=\"Enter a SMILES string here...\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"columns\" style={{ margin: \"12px 0\" }}>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Substructure</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  defaultValue={this.state.subStructureInput}\n                  onChange={(e) =>\n                    this.handleStateChange(e, \"subStructureInput\")\n                  }\n                  placeholder=\"Enter a SMILES or SMARTS string here...\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"columns\" style={{ margin: \"12px 0\" }}>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Legend</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  defaultValue={this.state.legend}\n                  onChange={(e) => this.handleStateChange(e, \"legend\")}\n                  placeholder=\"Add a legend here...\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Legend font size</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  defaultValue={this.state.legendFontSize}\n                  onChange={(e) => this.handleStateChange(e, \"legendFontSize\")}\n                  placeholder=\"Add a font size...\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"columns\" style={{ margin: \"12px 0\" }}>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Width</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  defaultValue={this.state.width}\n                  onChange={(e) => this.handleStateChange(e, \"width\")}\n                  placeholder=\"Width\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Height</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  defaultValue={this.state.height}\n                  onChange={(e) => this.handleStateChange(e, \"height\")}\n                  placeholder=\"Height\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Bond line width</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  defaultValue={this.state.bondLineWidth}\n                  onChange={(e) => this.handleStateChange(e, \"bondLineWidth\")}\n                  placeholder=\"Bond line width\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Annotation font scale</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  defaultValue={this.state.annotationFontScale }\n                  onChange={(e) => this.handleStateChange(e, \"annotationFontScale \")}\n                  placeholder=\"Annotation font scale\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Rotate</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  step=\"0.5\"\n                  defaultValue={this.state.rotate}\n                  onChange={(e) => this.handleStateChange(e, \"rotate\")}\n                  placeholder=\"Rotate\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"columns\" style={{ margin: \"12px 0\" }}>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Stereo-Annotation</label>\n              <div className=\"control\">\n                <input\n                  className=\"checkbox\"\n                  type=\"checkbox\"\n                  defaultChecked={this.state.addStereoAnnotation}\n                  onChange={(e) =>\n                    this.handleStateChange(e, \"addStereoAnnotation\")\n                  }\n                  placeholder=\"Stereo-Annotation\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Atom Indices</label>\n              <div className=\"control\">\n                <input\n                  className=\"checkbox\"\n                  type=\"checkbox\"\n                  defaultChecked={this.state.addAtomIndices}\n                  onChange={(e) => this.handleStateChange(e, \"addAtomIndices\")}\n                  placeholder=\"Atom Indices\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Bond Indices</label>\n              <div className=\"control\">\n                <input\n                  className=\"checkbox\"\n                  type=\"checkbox\"\n                  defaultChecked={this.state.addBondIndices}\n                  onChange={(e) => this.handleStateChange(e, \"addBondIndices\")}\n                  placeholder=\"Bond Indices\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Explicit Methyl</label>\n              <div className=\"control\">\n                <input\n                  className=\"checkbox\"\n                  type=\"checkbox\"\n                  defaultChecked={this.state.explicitMethyl}\n                  onChange={(e) => this.handleStateChange(e, \"explicitMethyl\")}\n                  placeholder=\"Explicit Methyl\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Scale bond width</label>\n              <div className=\"control\">\n                <input\n                  className=\"checkbox\"\n                  type=\"checkbox\"\n                  defaultChecked={this.state.scaleBondWidth}\n                  onChange={(e) => this.handleStateChange(e, \"scaleBondWidth\")}\n                  placeholder=\"Scale bond width\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Center molecule</label>\n              <div className=\"control\">\n                <input\n                  className=\"checkbox\"\n                  type=\"checkbox\"\n                  defaultChecked={this.state.centreMoleculesBeforeDrawing}\n                  onChange={(e) => this.handleStateChange(e, \"centreMoleculesBeforeDrawing\")}\n                  placeholder=\"Center molecule\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Comic mode</label>\n              <div className=\"control\">\n                <input\n                  className=\"checkbox\"\n                  type=\"checkbox\"\n                  defaultChecked={this.state.comicMode}\n                  onChange={(e) => this.handleStateChange(e, \"comicMode\")}\n                  placeholder=\"Comic mode\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"columns\" style={{ margin: \"12px 0\" }}>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Highlight Colour</label>\n              <div className=\"control\">\n                <input\n                  type=\"color\"\n                  className=\"input\"\n                  defaultValue={this.state.highlightColour}\n                  onChange={(e) => this.handleStateChange(e, \"highlightColour\")}\n                  placeholder=\"Highlight Colour\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Background Colour</label>\n              <div className=\"control\">\n                <input\n                  type=\"color\"\n                  className=\"input\"\n                  defaultValue={this.state.backgroundColour}\n                  onChange={(e) =>\n                    this.handleStateChange(e, \"backgroundColour\")\n                  }\n                  placeholder=\"Background Colour\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Legend Colour</label>\n              <div className=\"control\">\n                <input\n                  type=\"color\"\n                  className=\"input\"\n                  defaultValue={this.state.legendColour}\n                  onChange={(e) => this.handleStateChange(e, \"legendColour\")}\n                  placeholder=\"Legend Colour\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"field\">\n              <label className=\"label\">Symbol Colour</label>\n              <div className=\"control\">\n                <input\n                  type=\"color\"\n                  className=\"input\"\n                  defaultValue={this.state.symbolColour}\n                  onChange={(e) => this.handleStateChange(e, \"symbolColour\")}\n                  placeholder=\"Symbol Colour\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"columns\" style={{ margin: \"12px 0\" }}>\n          <div className=\"column\">\n          <div className=\"field\">\n              <label className=\"label\">SVG Rendering (Default is Canvas)</label>\n              <div className=\"control\">\n                <input\n                  className=\"checkbox\"\n                  type=\"checkbox\"\n                  defaultChecked={this.state.svgMode}\n                  onChange={(e) => this.handleStateChange(e, \"svgMode\")}\n                  placeholder=\"Svg mode\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.renderContent()}\n      </div>\n    );\n  }\n\n  renderContent() {\n    const width = this.state.width || 250;\n    const height = this.state.width || 250;\n    const bondLineWidth = this.state.bondLineWidth || 1;\n    const rotate = this.state.rotate || 0.0;\n    const annotationFontScale = this.state.annotationFontScale || 0.5;\n    const addStereoAnnotation = this.state.addStereoAnnotation || false;\n    const addAtomIndices = this.state.addAtomIndices || false;\n    const addBondIndices = this.state.addBondIndices || false;\n    const explicitMethyl = this.state.explicitMethyl || false;\n    const scaleBondWidth = this.state.scaleBondWidth || false;\n    const comicMode = this.state.comicMode || false;\n    const centreMoleculesBeforeDrawing = this.state.centreMoleculesBeforeDrawing || false;\n    const highlightColour = this.getColourProportionsFromHex(\n      this.state.highlightColour\n    );\n    const legendColour = this.getColourProportionsFromHex(\n      this.state.legendColour\n    );\n    const backgroundColour = this.getColourProportionsFromHex(\n      this.state.backgroundColour\n    );\n    const symbolColour = this.getColourProportionsFromHex(\n      this.state.symbolColour\n    );\n    const svgMode = this.state.svgMode || false;\n    if (this.state.computing) {\n      return (\n        <div className=\"columns\">\n          <div className=\"column\">\n            <span\n              style={{ width: width, height: height }}\n              key=\"computing-input-icon\"\n              className=\"icon is-small is-left\"\n            >\n              <i className=\"fas fa-circle-notch fa-spin\" />\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"columns\">\n        <div className=\"column\" style={{ margin: \"12px 12px\" }}>\n          <div\n            style={{\n              width: width + 12,\n              height: height + 12,\n              border: \"1px solid rgba(0,0,0,.1)\",\n              borderRadius: \"2px\"\n            }}\n          >\n            <MoleculeStructure\n              id=\"structure-example-drawing-options-caffeine\"\n              structure={this.state.mainStructureInput}\n              subStructure={this.state.subStructureInput}\n              width={width}\n              height={height}\n              svgMode={svgMode}\n              extraDetails={{\n                legend: this.state.legend || \"\",\n                legendFontSize: this.state.legendFontSize || 16,\n                bondLineWidth,\n                rotate,\n                addStereoAnnotation,\n                addAtomIndices,\n                addBondIndices,\n                explicitMethyl,\n                scaleBondWidth,\n                highlightColour,\n                legendColour,\n                backgroundColour,\n                symbolColour,\n                centreMoleculesBeforeDrawing,\n                annotationFontScale,\n                comicMode\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderInputIcon() {\n    if (this.state.computing) {\n      return (\n        <span key=\"computing-input-icon\" className=\"icon is-small is-left\">\n          <i className=\"fas fa-circle-notch fa-spin\" />\n        </span>\n      );\n    } else {\n      return (\n        <span key=\"search-input-icon\" className=\"icon is-small is-left\">\n          <i className=\"fas fa-search\" />\n        </span>\n      );\n    }\n  }\n\n  handleStateChange = _.debounce((e, stateProp) => {\n    this.setState({ computing: true });\n\n    setTimeout(() => {\n      let value;\n      if (e.target.type === \"number\") {\n        value = parseFloat(e.target.value, 10);\n      } else if (e.target.type === \"checkbox\") {\n        value = !!e.target.checked;\n      } else {\n        value = e.target.value;\n      }\n\n      this.setState({ [stateProp]: value });\n      this.setState({ computing: false });\n    }, 100);\n  }, 300);\n\n  getColourProportionsFromHex(hex) {\n    return _.take(\n      hexRgb(hex, { format: \"array\" }).map((v) =>\n        parseFloat((v / 255).toFixed(2), 10)\n      ),\n      3\n    );\n  }\n}\n\nexport default ExampleDrawingOptions;\n","import React from \"react\";\nimport MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\nimport { SMILES_LIST } from \"../utils/smiles\";\n\nclass ExampleList extends React.Component {\n  render() {\n    return (\n      <div id=\"component-example-list\" className=\"container\">\n        <section className=\"hero\">\n          <div className=\"hero-body\">\n            <p className=\"title\">Overview</p>\n            <p className=\"subtitle\">\n              You can draw any molecule from SMILES dynamically with rdkit.js .\n            </p>\n          </div>\n        </section>\n        <div\n          id=\"structure-list\"\n          className=\"columns is-desktop\"\n          style={{ margin: \"12px\", overflowX: \"scroll\" }}\n        >\n          {SMILES_LIST.map((smiles) => (\n            <div className=\"column\" key={smiles}>\n              <MoleculeStructure\n                id={smiles}\n                structure={smiles}\n                height={200}\n                width={200}\n                svgMode\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ExampleList;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Introduction from \"./components/Introduction/Introduction\";\nimport CodeExample from \"./components/CodeExample/CodeExample\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport SideNav from \"./components/SideNav/SideNav\";\nimport ExampleMoleculeStructure from \"./examples/ExampleMoleculeStructure\";\nimport ExampleSubstructure from \"./examples/ExampleSubstructure\";\nimport ExampleMultiSubstructure from \"./examples/ExampleMultiSubstructure\";\nimport ExampleSubstructureSearch from \"./examples/ExampleSubstructureSearch\";\nimport ExampleSVG from \"./examples/ExampleSvg\";\nimport ExampleCanvas from \"./examples/ExampleCanvas\";\nimport ExampleDrawingOptions from \"./examples/ExampleDrawingOptions\";\nimport ExampleList from \"./examples/ExampleList\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport MoleculeStructureCode from \"!!raw-loader!./components/MoleculeStructure/MoleculeStructure\";\nimport ExampleSVGCode from \"!!raw-loader!./examples/ExampleSvg.js\";\nimport ExampleCanvasCode from \"!!raw-loader!./examples/ExampleCanvas.js\";\nimport ExampleSubstructureCode from \"!!raw-loader!./examples/ExampleSubstructure.js\";\nimport ExampleMultiSubstructureCode from \"!!raw-loader!./examples/ExampleMultiSubstructure.js\";\nimport ExampleDrawingOptionsCode from \"!!raw-loader!./examples/ExampleDrawingOptions.js\";\nimport ExampleSubstructureSearchCode from \"!!raw-loader!./examples/ExampleSubstructureSearch\";\nimport ExampleListCode from \"!!raw-loader!./examples/ExampleList.js\";\nimport \"./index.css\";\n\nReactDOM.render(<NavBar />, document.getElementById(\"navbar\"));\nReactDOM.render(<SideNav />, document.getElementById(\"side-navigation\"));\nReactDOM.render(<Introduction />, document.getElementById(\"introduction\"));\n\nconst examples = [\n  {\n    code: ExampleListCode,\n    component: <ExampleList />,\n    elementId: \"example-list\"\n  },\n  {\n    code: MoleculeStructureCode,\n    component: <ExampleMoleculeStructure />,\n    elementId: \"example-mol-structure\"\n  },\n  {\n    code: ExampleSVGCode,\n    component: <ExampleSVG />,\n    elementId: \"example-svg\"\n  },\n  {\n    code: ExampleCanvasCode,\n    component: <ExampleCanvas />,\n    elementId: \"example-canvas\"\n  },\n  {\n    code: ExampleSubstructureCode,\n    component: <ExampleSubstructure />,\n    elementId: \"example-substructures\"\n  },\n  {\n    code: ExampleMultiSubstructureCode,\n    component: <ExampleMultiSubstructure />,\n    elementId: \"example-multi-substructures\"\n  },\n  {\n    code: ExampleDrawingOptionsCode,\n    component: <ExampleDrawingOptions />,\n    elementId: \"example-all-options\"\n  },\n  {\n    code: ExampleSubstructureSearchCode,\n    component: <ExampleSubstructureSearch />,\n    elementId: \"example-substructure-search\"\n  }\n];\n\nexamples.forEach((example) => {\n  ReactDOM.render(\n    <CodeExample code={example.code}>{example.component}</CodeExample>,\n    document.getElementById(example.elementId)\n  );\n});\n","export default \"import React from \\\"react\\\";\\nimport MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\nimport { SMILES_LIST } from \\\"../utils/smiles\\\";\\n\\nclass ExampleList extends React.Component {\\n  render() {\\n    return (\\n      <div id=\\\"component-example-list\\\" className=\\\"container\\\">\\n        <section className=\\\"hero\\\">\\n          <div className=\\\"hero-body\\\">\\n            <p className=\\\"title\\\">Overview</p>\\n            <p className=\\\"subtitle\\\">\\n              You can draw any molecule from SMILES dynamically with rdkit.js .\\n            </p>\\n          </div>\\n        </section>\\n        <div\\n          id=\\\"structure-list\\\"\\n          className=\\\"columns is-desktop\\\"\\n          style={{ margin: \\\"12px\\\", overflowX: \\\"scroll\\\" }}\\n        >\\n          {SMILES_LIST.map((smiles) => (\\n            <div className=\\\"column\\\" key={smiles}>\\n              <MoleculeStructure\\n                id={smiles}\\n                structure={smiles}\\n                height={200}\\n                width={200}\\n                svgMode\\n              />\\n            </div>\\n          ))}\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default ExampleList;\\n\";","export default \"import React, { Component } from \\\"react\\\";\\nimport _ from \\\"lodash\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport \\\"./MoleculeStructure.css\\\";\\nimport initRDKit from \\\"../../utils/initRDKit\\\";\\n\\nclass MoleculeStructure extends Component {\\n  static propTypes = {\\n    /**\\n     * Generic properties\\n     */\\n    id: PropTypes.string.isRequired,\\n    className: PropTypes.string,\\n    svgMode: PropTypes.bool,\\n    width: PropTypes.number,\\n    height: PropTypes.number,\\n    /**\\n     * RDKit-specific properties\\n     */\\n    structure: PropTypes.string.isRequired,\\n    subStructure: PropTypes.string,\\n    extraDetails: PropTypes.object,\\n    drawingDelay: PropTypes.number\\n  };\\n\\n  static defaultProps = {\\n    subStructure: \\\"\\\",\\n    className: \\\"\\\",\\n    width: 250,\\n    height: 200,\\n    svgMode: false,\\n    extraDetails: {},\\n    drawingDelay: undefined\\n  };\\n\\n  constructor(props) {\\n    super(props);\\n\\n    this.MOL_DETAILS = {\\n      width: this.props.width,\\n      height: this.props.height,\\n      bondLineWidth: 1,\\n      addStereoAnnotation: true,\\n      ...this.props.extraDetails\\n    };\\n\\n    this.state = {\\n      svg: undefined,\\n      rdKitLoaded: false,\\n      rdKitError: false\\n    };\\n  }\\n\\n  draw() {\\n    if (this.props.drawingDelay) {\\n      setTimeout(() => {\\n        this.drawSVGorCanvas();\\n      }, this.props.drawingDelay);\\n    } else {\\n      this.drawSVGorCanvas();\\n    }\\n  }\\n\\n  drawSVGorCanvas() {\\n    const mol = window.RDKit.get_mol(this.props.structure || \\\"invalid\\\");\\n    const qmol = window.RDKit.get_qmol(this.props.subStructure || \\\"invalid\\\");\\n\\n    if (this.props.svgMode && this.isValidMol(mol)) {\\n      const svg = mol.get_svg_with_highlights(this.getMolDetails(mol, qmol));\\n      this.setState({ svg });\\n    } else if (this.isValidMol(mol)) {\\n      const canvas = document.getElementById(this.props.id);\\n      mol.draw_to_canvas_with_highlights(canvas, this.getMolDetails(mol, qmol));\\n    }\\n\\n    /**\\n     * Delete C++ mol objects manually\\n     * https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html#memory-management\\n     */\\n    mol.delete();\\n    qmol.delete();\\n  }\\n\\n  isValidMol(mol) {\\n    return !!mol && mol.is_valid();\\n  }\\n\\n  getMolDetails(mol, qmol) {\\n    if (this.isValidMol(mol) && this.isValidMol(qmol)) {\\n      const subStructHighlightDetails = JSON.parse(\\n        mol.get_substruct_matches(qmol)\\n      );\\n      const subStructHighlightDetailsMerged = !_.isEmpty(\\n        subStructHighlightDetails\\n      )\\n        ? subStructHighlightDetails.reduce(\\n            (acc, { atoms, bonds }) => ({\\n              atoms: [...acc.atoms, ...atoms],\\n              bonds: [...acc.bonds, ...bonds]\\n            }),\\n            { bonds: [], atoms: [] }\\n          )\\n        : subStructHighlightDetails;\\n      return JSON.stringify({\\n        ...this.MOL_DETAILS,\\n        ...(this.props.extraDetails || {}),\\n        ...subStructHighlightDetailsMerged\\n      });\\n    } else {\\n      return JSON.stringify({\\n        ...this.MOL_DETAILS,\\n        ...(this.props.extraDetails || {})\\n      });\\n    }\\n  }\\n\\n  componentDidMount() {\\n    initRDKit()\\n      .then(() => {\\n        this.setState({ rdKitLoaded: true });\\n        this.draw();\\n      })\\n      .catch(() => {\\n        this.setState({ rdKitError: true });\\n      });\\n  }\\n\\n  componentDidUpdate(prevProps) {\\n    if (this.state.rdKitLoaded) {\\n      const shouldUpdateDrawing =\\n        prevProps.structure !== this.props.structure ||\\n        prevProps.subStructure !== this.props.subStructure ||\\n        prevProps.width !== this.props.width ||\\n        prevProps.height !== this.props.height ||\\n        !_.isEqual(prevProps.extraDetails, this.props.extraDetails);\\n\\n      if (shouldUpdateDrawing) {\\n        this.draw();\\n      }\\n    }\\n  }\\n\\n  render() {\\n    if (this.state.rdKitError) {\\n      return \\\"Error loading renderer.\\\";\\n    }\\n    if (!this.state.rdKitLoaded) {\\n      return \\\"Loading renderer...\\\";\\n    }\\n\\n    const mol = window.RDKit.get_mol(this.props.structure || \\\"invalid\\\");\\n    const isValidMol = this.isValidMol(mol);\\n    mol.delete();\\n\\n    if (!isValidMol) {\\n      return (\\n        <span title={`Cannot render structure: ${this.props.structure}`}>\\n          Render Error.\\n        </span>\\n      );\\n    } else if (this.props.svgMode) {\\n      return (\\n        <div\\n          title={this.props.structure}\\n          className={\\\"molecule-structure-svg \\\" + (this.props.className || \\\"\\\")}\\n          style={{ width: this.props.width, height: this.props.height }}\\n          dangerouslySetInnerHTML={{ __html: this.state.svg }}\\n        ></div>\\n      );\\n    } else {\\n      return (\\n        <div\\n          className={\\n            \\\"molecule-canvas-container \\\" + (this.props.className || \\\"\\\")\\n          }\\n        >\\n          <canvas\\n            title={this.props.structure}\\n            id={this.props.id}\\n            width={this.props.width}\\n            height={this.props.height}\\n          ></canvas>\\n        </div>\\n      );\\n    }\\n  }\\n}\\n\\nexport default MoleculeStructure;\\n\";","export default \"import MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nfunction ExampleSVG() {\\n  const caffeine = \\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)\\\";\\n  const aspirin = \\\"CC(=O)Oc1ccccc1C(=O)O\\\";\\n\\n  return (\\n    <div id=\\\"component-example-svg\\\" className=\\\"container\\\">\\n      <section className=\\\"hero\\\">\\n        <div className=\\\"hero-body\\\">\\n          <p className=\\\"title\\\">SVG Rendering</p>\\n          <p className=\\\"subtitle\\\">You can render molecules using svg.</p>\\n        </div>\\n      </section>\\n      <div className=\\\"columns is-desktop\\\">\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-svg-caffeine\\\"\\n            structure={caffeine}\\n            width={350}\\n            height={300}\\n            svgMode\\n          />\\n        </div>\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-svg-aspirin\\\"\\n            structure={aspirin}\\n            width={350}\\n            height={300}\\n            svgMode\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default ExampleSVG;\\n\";","export default \"import MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nfunction ExampleCanvas() {\\n  const caffeine = \\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)\\\";\\n  const aspirin = \\\"CC(=O)Oc1ccccc1C(=O)O\\\";\\n\\n  return (\\n    <div id=\\\"component-example-canvas\\\" className=\\\"container\\\">\\n      <section className=\\\"hero\\\">\\n        <div className=\\\"hero-body\\\">\\n          <p className=\\\"title\\\">Canvas rendering</p>\\n          <p className=\\\"subtitle\\\">\\n            You can also render molecules using the HTML Canvas API.\\n          </p>\\n        </div>\\n      </section>\\n      <div className=\\\"columns is-desktop\\\">\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-canvas-caffeine\\\"\\n            structure={caffeine}\\n            width={350}\\n            height={300}\\n          />\\n        </div>\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-canvas-aspirin\\\"\\n            structure={aspirin}\\n            width={350}\\n            height={300}\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default ExampleCanvas;\\n\";","export default \"import MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nfunction ExampleSubstructure() {\\n  const caffeine = \\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)\\\";\\n  const caffeineSubStruct = \\\"[N,n,O;!H0]\\\";\\n\\n  const aspirin = \\\"CC(=O)Oc1ccccc1C(=O)O\\\";\\n  const aspirinSubStruct = \\\"CC(=O)Oc1ccccc1C\\\";\\n\\n  return (\\n    <div id=\\\"component-example-substruct\\\" className=\\\"container\\\">\\n      <section className=\\\"hero\\\">\\n        <div className=\\\"hero-body\\\">\\n          <p className=\\\"title\\\">Substructure Highlight</p>\\n          <p className=\\\"subtitle\\\">\\n            You can also highlight substructure of molecules with both the SVG\\n            and Canvas APIs.\\n          </p>\\n        </div>\\n      </section>\\n      <div className=\\\"columns is-desktop\\\">\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-substruct-svg-caffeine\\\"\\n            structure={caffeine}\\n            subStructure={caffeineSubStruct}\\n            width={350}\\n            height={300}\\n            svgMode\\n          />\\n        </div>\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-subsctruct-canvas-aspirin\\\"\\n            structure={aspirin}\\n            subStructure={aspirinSubStruct}\\n            width={350}\\n            height={300}\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default ExampleSubstructure;\\n\";","export default \"import MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nfunction ExampleMultiSubstructure() {\\n  const caffeine = \\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)\\\";\\n  const caffeineSubStruct = \\\"[N,n,o,O]\\\";\\n\\n  const aspirin = \\\"CC(=O)Oc1ccccc1C(=O)O\\\";\\n  const aspirinSubStruct = \\\"[O,o].c1ccccc1\\\";\\n\\n  return (\\n    <div id=\\\"component-example-multi-substruct\\\" className=\\\"container\\\">\\n      <section className=\\\"hero\\\">\\n        <div className=\\\"hero-body\\\">\\n          <p className=\\\"title\\\">Multi-substructure Highlight</p>\\n          <p className=\\\"subtitle\\\">\\n            You can also highlight multiple substructures of molecules with\\n            SMILES, SMARTS and a combination of the two with dot notation.\\n          </p>\\n        </div>\\n      </section>\\n      <div className=\\\"columns is-desktop\\\">\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-multisubstruct-svg-caffeine\\\"\\n            structure={caffeine}\\n            subStructure={caffeineSubStruct}\\n            width={350}\\n            height={300}\\n            svgMode\\n          />\\n        </div>\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            id=\\\"structure-example-multisubsctruct-canvas-aspirin\\\"\\n            structure={aspirin}\\n            subStructure={aspirinSubStruct}\\n            width={350}\\n            height={300}\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default ExampleMultiSubstructure;\\n\";","export default \"import React from \\\"react\\\";\\nimport _ from \\\"lodash\\\";\\nimport hexRgb from \\\"hex-rgb\\\";\\nimport MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nclass ExampleDrawingOptions extends React.Component {\\n  static initialState = {\\n    computing: false,\\n    mainStructureInput:\\n      \\\"Cc1coc(-c2cn([C@@H]3O[C@H](COc4ccc5ccc(N6CCC6)nc5c4)[C@@H](O)[C@@H]3F)c3ncnc(N)c23)n1\\\",\\n    subStructureInput: \\\"[n,O]\\\",\\n    legend: \\\"Legend Text\\\",\\n    legendFontSize: 16,\\n    width: 500,\\n    height: 450,\\n    bondLineWidth: 1,\\n    scaleBondWidth: false,\\n    addStereoAnnotation: true,\\n    addAtomIndices: true,\\n    addBondIndices: false,\\n    explicitMethyl: true,\\n    centreMoleculesBeforeDrawing: false,\\n    highlightColour: \\\"#fd5c63\\\",\\n    legendColour: \\\"#000000\\\",\\n    symbolColour: \\\"#000000\\\",\\n    backgroundColour: \\\"#ffffff\\\",\\n    rotate: 0.0,\\n    annotationFontScale: 0.5,\\n    comicMode: false,\\n    svgMode: false\\n  };\\n\\n  state = { ...ExampleDrawingOptions.initialState };\\n\\n  render() {\\n    return (\\n      <div id=\\\"component-example-drawing-options\\\" className=\\\"container\\\">\\n        <section className=\\\"hero\\\">\\n          <div className=\\\"hero-body\\\">\\n            <p className=\\\"title\\\">Additional Drawing Options</p>\\n            <p className=\\\"subtitle\\\">\\n              RDKit.js provides you with all these additional options.\\n            </p>\\n          </div>\\n        </section>\\n        <div className=\\\"columns\\\" style={{ margin: \\\"12px 0\\\" }}>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Main Structure</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  defaultValue={this.state.mainStructureInput}\\n                  onChange={(e) =>\\n                    this.handleStateChange(e, \\\"mainStructureInput\\\")\\n                  }\\n                  placeholder=\\\"Enter a SMILES string here...\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div className=\\\"columns\\\" style={{ margin: \\\"12px 0\\\" }}>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Substructure</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  defaultValue={this.state.subStructureInput}\\n                  onChange={(e) =>\\n                    this.handleStateChange(e, \\\"subStructureInput\\\")\\n                  }\\n                  placeholder=\\\"Enter a SMILES or SMARTS string here...\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div className=\\\"columns\\\" style={{ margin: \\\"12px 0\\\" }}>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Legend</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  defaultValue={this.state.legend}\\n                  onChange={(e) => this.handleStateChange(e, \\\"legend\\\")}\\n                  placeholder=\\\"Add a legend here...\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Legend font size</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  type=\\\"number\\\"\\n                  defaultValue={this.state.legendFontSize}\\n                  onChange={(e) => this.handleStateChange(e, \\\"legendFontSize\\\")}\\n                  placeholder=\\\"Add a font size...\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div className=\\\"columns\\\" style={{ margin: \\\"12px 0\\\" }}>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Width</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  type=\\\"number\\\"\\n                  defaultValue={this.state.width}\\n                  onChange={(e) => this.handleStateChange(e, \\\"width\\\")}\\n                  placeholder=\\\"Width\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Height</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  type=\\\"number\\\"\\n                  defaultValue={this.state.height}\\n                  onChange={(e) => this.handleStateChange(e, \\\"height\\\")}\\n                  placeholder=\\\"Height\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Bond line width</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  type=\\\"number\\\"\\n                  defaultValue={this.state.bondLineWidth}\\n                  onChange={(e) => this.handleStateChange(e, \\\"bondLineWidth\\\")}\\n                  placeholder=\\\"Bond line width\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Annotation font scale</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  type=\\\"number\\\"\\n                  step=\\\"0.1\\\"\\n                  defaultValue={this.state.annotationFontScale }\\n                  onChange={(e) => this.handleStateChange(e, \\\"annotationFontScale \\\")}\\n                  placeholder=\\\"Annotation font scale\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Rotate</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  type=\\\"number\\\"\\n                  step=\\\"0.5\\\"\\n                  defaultValue={this.state.rotate}\\n                  onChange={(e) => this.handleStateChange(e, \\\"rotate\\\")}\\n                  placeholder=\\\"Rotate\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n\\n        <div className=\\\"columns\\\" style={{ margin: \\\"12px 0\\\" }}>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Stereo-Annotation</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"checkbox\\\"\\n                  type=\\\"checkbox\\\"\\n                  defaultChecked={this.state.addStereoAnnotation}\\n                  onChange={(e) =>\\n                    this.handleStateChange(e, \\\"addStereoAnnotation\\\")\\n                  }\\n                  placeholder=\\\"Stereo-Annotation\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Atom Indices</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"checkbox\\\"\\n                  type=\\\"checkbox\\\"\\n                  defaultChecked={this.state.addAtomIndices}\\n                  onChange={(e) => this.handleStateChange(e, \\\"addAtomIndices\\\")}\\n                  placeholder=\\\"Atom Indices\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Bond Indices</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"checkbox\\\"\\n                  type=\\\"checkbox\\\"\\n                  defaultChecked={this.state.addBondIndices}\\n                  onChange={(e) => this.handleStateChange(e, \\\"addBondIndices\\\")}\\n                  placeholder=\\\"Bond Indices\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Explicit Methyl</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"checkbox\\\"\\n                  type=\\\"checkbox\\\"\\n                  defaultChecked={this.state.explicitMethyl}\\n                  onChange={(e) => this.handleStateChange(e, \\\"explicitMethyl\\\")}\\n                  placeholder=\\\"Explicit Methyl\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Scale bond width</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"checkbox\\\"\\n                  type=\\\"checkbox\\\"\\n                  defaultChecked={this.state.scaleBondWidth}\\n                  onChange={(e) => this.handleStateChange(e, \\\"scaleBondWidth\\\")}\\n                  placeholder=\\\"Scale bond width\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Center molecule</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"checkbox\\\"\\n                  type=\\\"checkbox\\\"\\n                  defaultChecked={this.state.centreMoleculesBeforeDrawing}\\n                  onChange={(e) => this.handleStateChange(e, \\\"centreMoleculesBeforeDrawing\\\")}\\n                  placeholder=\\\"Center molecule\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Comic mode</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"checkbox\\\"\\n                  type=\\\"checkbox\\\"\\n                  defaultChecked={this.state.comicMode}\\n                  onChange={(e) => this.handleStateChange(e, \\\"comicMode\\\")}\\n                  placeholder=\\\"Comic mode\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n\\n        <div className=\\\"columns\\\" style={{ margin: \\\"12px 0\\\" }}>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Highlight Colour</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  type=\\\"color\\\"\\n                  className=\\\"input\\\"\\n                  defaultValue={this.state.highlightColour}\\n                  onChange={(e) => this.handleStateChange(e, \\\"highlightColour\\\")}\\n                  placeholder=\\\"Highlight Colour\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Background Colour</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  type=\\\"color\\\"\\n                  className=\\\"input\\\"\\n                  defaultValue={this.state.backgroundColour}\\n                  onChange={(e) =>\\n                    this.handleStateChange(e, \\\"backgroundColour\\\")\\n                  }\\n                  placeholder=\\\"Background Colour\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Legend Colour</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  type=\\\"color\\\"\\n                  className=\\\"input\\\"\\n                  defaultValue={this.state.legendColour}\\n                  onChange={(e) => this.handleStateChange(e, \\\"legendColour\\\")}\\n                  placeholder=\\\"Legend Colour\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">Symbol Colour</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  type=\\\"color\\\"\\n                  className=\\\"input\\\"\\n                  defaultValue={this.state.symbolColour}\\n                  onChange={(e) => this.handleStateChange(e, \\\"symbolColour\\\")}\\n                  placeholder=\\\"Symbol Colour\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div className=\\\"columns\\\" style={{ margin: \\\"12px 0\\\" }}>\\n          <div className=\\\"column\\\">\\n          <div className=\\\"field\\\">\\n              <label className=\\\"label\\\">SVG Rendering (Default is Canvas)</label>\\n              <div className=\\\"control\\\">\\n                <input\\n                  className=\\\"checkbox\\\"\\n                  type=\\\"checkbox\\\"\\n                  defaultChecked={this.state.svgMode}\\n                  onChange={(e) => this.handleStateChange(e, \\\"svgMode\\\")}\\n                  placeholder=\\\"Svg mode\\\"\\n                />\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        {this.renderContent()}\\n      </div>\\n    );\\n  }\\n\\n  renderContent() {\\n    const width = this.state.width || 250;\\n    const height = this.state.width || 250;\\n    const bondLineWidth = this.state.bondLineWidth || 1;\\n    const rotate = this.state.rotate || 0.0;\\n    const annotationFontScale = this.state.annotationFontScale || 0.5;\\n    const addStereoAnnotation = this.state.addStereoAnnotation || false;\\n    const addAtomIndices = this.state.addAtomIndices || false;\\n    const addBondIndices = this.state.addBondIndices || false;\\n    const explicitMethyl = this.state.explicitMethyl || false;\\n    const scaleBondWidth = this.state.scaleBondWidth || false;\\n    const comicMode = this.state.comicMode || false;\\n    const centreMoleculesBeforeDrawing = this.state.centreMoleculesBeforeDrawing || false;\\n    const highlightColour = this.getColourProportionsFromHex(\\n      this.state.highlightColour\\n    );\\n    const legendColour = this.getColourProportionsFromHex(\\n      this.state.legendColour\\n    );\\n    const backgroundColour = this.getColourProportionsFromHex(\\n      this.state.backgroundColour\\n    );\\n    const symbolColour = this.getColourProportionsFromHex(\\n      this.state.symbolColour\\n    );\\n    const svgMode = this.state.svgMode || false;\\n    if (this.state.computing) {\\n      return (\\n        <div className=\\\"columns\\\">\\n          <div className=\\\"column\\\">\\n            <span\\n              style={{ width: width, height: height }}\\n              key=\\\"computing-input-icon\\\"\\n              className=\\\"icon is-small is-left\\\"\\n            >\\n              <i className=\\\"fas fa-circle-notch fa-spin\\\" />\\n            </span>\\n          </div>\\n        </div>\\n      );\\n    }\\n\\n    return (\\n      <div className=\\\"columns\\\">\\n        <div className=\\\"column\\\" style={{ margin: \\\"12px 12px\\\" }}>\\n          <div\\n            style={{\\n              width: width + 12,\\n              height: height + 12,\\n              border: \\\"1px solid rgba(0,0,0,.1)\\\",\\n              borderRadius: \\\"2px\\\"\\n            }}\\n          >\\n            <MoleculeStructure\\n              id=\\\"structure-example-drawing-options-caffeine\\\"\\n              structure={this.state.mainStructureInput}\\n              subStructure={this.state.subStructureInput}\\n              width={width}\\n              height={height}\\n              svgMode={svgMode}\\n              extraDetails={{\\n                legend: this.state.legend || \\\"\\\",\\n                legendFontSize: this.state.legendFontSize || 16,\\n                bondLineWidth,\\n                rotate,\\n                addStereoAnnotation,\\n                addAtomIndices,\\n                addBondIndices,\\n                explicitMethyl,\\n                scaleBondWidth,\\n                highlightColour,\\n                legendColour,\\n                backgroundColour,\\n                symbolColour,\\n                centreMoleculesBeforeDrawing,\\n                annotationFontScale,\\n                comicMode\\n              }}\\n            />\\n          </div>\\n        </div>\\n      </div>\\n    );\\n  }\\n\\n  renderInputIcon() {\\n    if (this.state.computing) {\\n      return (\\n        <span key=\\\"computing-input-icon\\\" className=\\\"icon is-small is-left\\\">\\n          <i className=\\\"fas fa-circle-notch fa-spin\\\" />\\n        </span>\\n      );\\n    } else {\\n      return (\\n        <span key=\\\"search-input-icon\\\" className=\\\"icon is-small is-left\\\">\\n          <i className=\\\"fas fa-search\\\" />\\n        </span>\\n      );\\n    }\\n  }\\n\\n  handleStateChange = _.debounce((e, stateProp) => {\\n    this.setState({ computing: true });\\n\\n    setTimeout(() => {\\n      let value;\\n      if (e.target.type === \\\"number\\\") {\\n        value = parseFloat(e.target.value, 10);\\n      } else if (e.target.type === \\\"checkbox\\\") {\\n        value = !!e.target.checked;\\n      } else {\\n        value = e.target.value;\\n      }\\n\\n      this.setState({ [stateProp]: value });\\n      this.setState({ computing: false });\\n    }, 100);\\n  }, 300);\\n\\n  getColourProportionsFromHex(hex) {\\n    return _.take(\\n      hexRgb(hex, { format: \\\"array\\\" }).map((v) =>\\n        parseFloat((v / 255).toFixed(2), 10)\\n      ),\\n      3\\n    );\\n  }\\n}\\n\\nexport default ExampleDrawingOptions;\\n\";","export default \"import React from \\\"react\\\";\\nimport _ from \\\"lodash\\\";\\nimport MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\nimport { SMILES_LIST } from \\\"../utils/smiles\\\";\\n\\nclass ExampleList extends React.Component {\\n  state = {\\n    matches: SMILES_LIST,\\n    searchValue: \\\"\\\",\\n    searching: false\\n  };\\n\\n  render() {\\n    const matches = this.state.matches.slice(0, 50);\\n    return (\\n      <div id=\\\"component-example-substruct-search\\\" className=\\\"container\\\">\\n        <section className=\\\"hero\\\">\\n          <div className=\\\"hero-body\\\">\\n            <p className=\\\"title\\\">Substructure match</p>\\n            <p className=\\\"subtitle\\\">\\n              You can perform client-side substructure match.\\n            </p>\\n          </div>\\n        </section>\\n        <div className=\\\"columns\\\" style={{ margin: \\\"12px 0\\\" }}>\\n          <div className=\\\"column\\\">\\n            <div className=\\\"field\\\">\\n              <div className=\\\"control has-icons-left\\\">\\n                <input\\n                  className=\\\"input\\\"\\n                  type=\\\"email\\\"\\n                  onChange={(e) => this.handleSearchChange(e)}\\n                  placeholder=\\\"Enter a SMARTS or SMILES string here...\\\"\\n                />\\n                {this.renderInputIcon()}\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div className=\\\"columns is-multiline\\\" style={{ margin: \\\"12px\\\" }}>\\n          {matches.length > 0\\n            ? matches.slice(0, 40).map((smiles) => (\\n                <div className=\\\"column\\\" key={smiles}>\\n                  <MoleculeStructure\\n                    id={smiles}\\n                    structure={smiles}\\n                    subStructure={this.state.searchValue}\\n                    height={200}\\n                    width={200}\\n                    svgMode\\n                  />\\n                </div>\\n              ))\\n            : \\\"Input is either invalid or no matches were found.\\\"}\\n        </div>\\n      </div>\\n    );\\n  }\\n\\n  handleSearchChange = _.debounce((e) => {\\n    this.setState({ searching: true });\\n\\n    setTimeout(() => {\\n      const noMatchLength = 2;\\n      const currentVal = e.target.value;\\n      this.setState({ searchValue: currentVal });\\n      if (!currentVal) {\\n        this.setState({ smilesList: SMILES_LIST });\\n      } else {\\n        const qmol = window.RDKit.get_qmol(currentVal);\\n        const matches = SMILES_LIST.filter((smiles) => {\\n          const mol = window.RDKit.get_mol(smiles);\\n          const hasMatch = mol.get_substruct_match(qmol).length > noMatchLength;\\n          mol.delete();\\n          return hasMatch;\\n        });\\n        this.setState({ matches });\\n        if (qmol.is_valid()) {\\n        } else {\\n          this.setState({ matches: [] });\\n        }\\n        qmol.delete();\\n      }\\n\\n      this.setState({ searching: false });\\n    }, 100);\\n  }, 300);\\n\\n  renderInputIcon() {\\n    if (this.state.searching) {\\n      return (\\n        <span key=\\\"searching-input-icon\\\" className=\\\"icon is-small is-left\\\">\\n          <i className=\\\"fas fa-circle-notch fa-spin\\\" />\\n        </span>\\n      );\\n    } else {\\n      return (\\n        <span key=\\\"search-input-icon\\\" className=\\\"icon is-small is-left\\\">\\n          <i className=\\\"fas fa-search\\\" />\\n        </span>\\n      );\\n    }\\n  }\\n}\\n\\nexport default ExampleList;\\n\";"],"sourceRoot":""}